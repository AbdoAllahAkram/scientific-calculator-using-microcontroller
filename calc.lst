
AVRASM ver. 2.1.30  I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm Sat Apr 18 01:13:39 2015

I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1095): warning: Register r4 already defined by the .DEF directive
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1096): warning: Register r5 already defined by the .DEF directive
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1097): warning: Register r7 already defined by the .DEF directive
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1098): warning: Register r6 already defined by the .DEF directive
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1099): warning: Register r9 already defined by the .DEF directive
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1100): warning: Register r8 already defined by the .DEF directive
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1101): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.20 Evaluation
                 ;(C) Copyright 1998-2015 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _y=R7
                 	.DEF _z=R6
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0053 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1134): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 
                 _0x0:
00002b 6953
00002c 206e
00002d 4300
00002e 736f      	.DB  0x53,0x69,0x6E,0x20,0x0,0x43,0x6F,0x73
00002f 0020
000030 6154
000031 206e
000032 4300      	.DB  0x20,0x0,0x54,0x61,0x6E,0x20,0x0,0x43
000033 746f
000034 0020
000035 5361
000036 6e69      	.DB  0x6F,0x74,0x20,0x0,0x61,0x53,0x69,0x6E
000037 6100
000038 6f43
000039 0073
00003a 6f4c      	.DB  0x0,0x61,0x43,0x6F,0x73,0x0,0x4C,0x6F
00003b 2067
00003c 5300
00003d 7271
00003e 2074      	.DB  0x67,0x20,0x0,0x53,0x71,0x72,0x74,0x20
00003f 6500
000040 7078
000041 0020      	.DB  0x0,0x65,0x78,0x70,0x20,0x0
                 _0x2000003:
000042 c080      	.DB  0x80,0xC0
                 _0x2020060:
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1146): warning: .cseg .db misalignment - padding zero byte
000043 0001      	.DB  0x1
                 _0x2020000:
000044 4e2d
000045 4e41
000046 4900
000047 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
I:\College\Projects\Electronics\scientific-calculator\CodeVision\calc.asm(1149): warning: .cseg .db misalignment - padding zero byte
000048 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000049 0001      	.DW  0x01
00004a 0007      	.DW  0x07
00004b 0054      	.DW  __REG_VARS*2
                 
00004c 0002      	.DW  0x02
00004d 018d      	.DW  __base_y_G100
00004e 0084      	.DW  _0x2000003*2
                 
00004f 0001      	.DW  0x01
000050 0191      	.DW  __seed_G101
000051 0086      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000052 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000053 94f8      	CLI
000054 27ee      	CLR  R30
000055 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000056 e0f1      	LDI  R31,1
000057 bffb      	OUT  GICR,R31
000058 bfeb      	OUT  GICR,R30
000059 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005a e1f8      	LDI  R31,0x18
00005b bdf1      	OUT  WDTCR,R31
00005c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00005d e08d      	LDI  R24,(14-2)+1
00005e e0a2      	LDI  R26,2
00005f 27bb      	CLR  R27
                 __CLEAR_REG:
000060 93ed      	ST   X+,R30
000061 958a      	DEC  R24
000062 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000063 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000064 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000065 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000066 93ed      	ST   X+,R30
000067 9701      	SBIW R24,1
000068 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000069 e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006b 9185      	LPM  R24,Z+
00006c 9195      	LPM  R25,Z+
00006d 9700      	SBIW R24,0
00006e f061      	BREQ __GLOBAL_INI_END
00006f 91a5      	LPM  R26,Z+
000070 91b5      	LPM  R27,Z+
000071 9005      	LPM  R0,Z+
000072 9015      	LPM  R1,Z+
000073 01bf      	MOVW R22,R30
000074 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000075 9005      	LPM  R0,Z+
000076 920d      	ST   X+,R0
000077 9701      	SBIW R24,1
000078 f7e1      	BRNE __GLOBAL_INI_LOOP
000079 01fb      	MOVW R30,R22
00007a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007c bfed      	OUT  SPL,R30
00007d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000080 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000081 940c 0083 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ;To download other free projects visit www.avrprojects.info
                 ;
                 ;*/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <lcd.h>
                 ;#include <stdlib.h>
                 ;#include <math.h>
                 ;
                 ;#asm
                    .equ __lcd_port=0x18
                 ; 0000 000E #endasm
                 ;//#############################################
                 ;int key(void);
                 ;float _Main(void);
                 ;void Mohandes(void);
                 ;void Mohasebe(void);
                 ;void Alamat(int,int);
                 ;float Emoji(int);
                 ;//#############################################
                 ;float a = 0 , b = 0 , c = 0 , q , t;
                 ;int i ;
                 ;char y=0 , lcd[25] , z   ;
                 ;//#############################################
                 ;void main(void){
                 ; 0000 001B void main(void){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001C 
                 ; 0000 001D DDRB=0x0F;
000083 e0ef      	LDI  R30,LOW(15)
000084 bbe7      	OUT  0x17,R30
                 ; 0000 001E DDRC=0x07;
000085 e0e7      	LDI  R30,LOW(7)
000086 bbe4      	OUT  0x14,R30
                 ; 0000 001F DDRD=0x0F;
000087 e0ef      	LDI  R30,LOW(15)
000088 bbe1      	OUT  0x11,R30
                 ; 0000 0020 
                 ; 0000 0021 lcd_init(16);
000089 e1a0      	LDI  R26,LOW(16)
00008a d2d4      	RCALL _lcd_init
                 ; 0000 0022 while (1){
                 _0x3:
                 ; 0000 0023 _Main();
00008b d002      	RCALL __Main
                 ; 0000 0024 }
00008c cffe      	RJMP _0x3
                 ; 0000 0025 }
                 _0x6:
00008d cfff      	RJMP _0x6
                 ; .FEND
                 ;//#############################################################
                 ;float _Main(void){
                 ; 0000 0027 float _Main(void){
                 __Main:
                 ; .FSTART __Main
                 ; 0000 0028 int Loop = 1 ;
                 ; 0000 0029 y = key();
00008e 931a      	ST   -Y,R17
00008f 930a      	ST   -Y,R16
                 ;	Loop -> R16,R17
                +
000090 e001     +LDI R16 , LOW ( 1 )
000091 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
000092 d579      	RCALL SUBOPT_0x0
                 ; 0000 002A if( y == 15 ){a = 0 ;b = 0 ;c = 0 ;lcd_clear();return 0 ;}
000093 f411      	BRNE _0x7
000094 d57c      	RCALL SUBOPT_0x1
000095 c07c      	RJMP _0x20A000F
                 ; 0000 002B if( y < 10 ){
                 _0x7:
000096 e0ea      	LDI  R30,LOW(10)
000097 167e      	CP   R7,R30
000098 f408      	BRSH _0x8
                 ; 0000 002C         a = (a*10)+y ;
000099 d591      	RCALL SUBOPT_0x2
                 ; 0000 002D         itoa(y , lcd);
                 ; 0000 002E         lcd_puts(lcd);
                 ; 0000 002F         delay_ms(50);
                 ; 0000 0030 }
                 ; 0000 0031 
                 ; 0000 0032 
                 ; 0000 0033 
                 ; 0000 0034 if( y > 9 && y < 16 ){
                 _0x8:
00009a e0e9      	LDI  R30,LOW(9)
00009b 15e7      	CP   R30,R7
00009c f418      	BRSH _0xA
00009d e1e0      	LDI  R30,LOW(16)
00009e 167e      	CP   R7,R30
00009f f008      	BRLO _0xB
                 _0xA:
0000a0 c038      	RJMP _0x9
                 _0xB:
                 ; 0000 0035         if( y == 15 ){a = 0 ;b = 0 ;c = 0 ;lcd_clear();return 0 ;}
0000a1 e0ef      	LDI  R30,LOW(15)
0000a2 15e7      	CP   R30,R7
0000a3 f411      	BRNE _0xC
0000a4 d56c      	RCALL SUBOPT_0x1
0000a5 c06c      	RJMP _0x20A000F
                 ; 0000 0036         z = y ;
                 _0xC:
0000a6 2c67      	MOV  R6,R7
                 ; 0000 0037         Alamat(y,1);
0000a7 d5ad      	RCALL SUBOPT_0x3
0000a8 e0a1      	LDI  R26,LOW(1)
0000a9 e0b0      	LDI  R27,0
0000aa d10a      	RCALL _Alamat
                 ; 0000 0038         while(Loop){
                 _0xD:
0000ab 2e00      	MOV  R0,R16
0000ac 2a01      	OR   R0,R17
0000ad f159      	BREQ _0xF
                 ; 0000 0039         y = key();
0000ae d55d      	RCALL SUBOPT_0x0
                 ; 0000 003A         if( y == 15 ){a = 0 ;b = 0 ;c = 0 ;lcd_clear();return 0 ;}
0000af f411      	BRNE _0x10
0000b0 d560      	RCALL SUBOPT_0x1
0000b1 c060      	RJMP _0x20A000F
                 ; 0000 003B         if( y < 10 ){
                 _0x10:
0000b2 e0ea      	LDI  R30,LOW(10)
0000b3 167e      	CP   R7,R30
0000b4 f4d0      	BRSH _0x11
                 ; 0000 003C                 b = (b*10)+y ;
0000b5 d5a4      	RCALL SUBOPT_0x4
0000b6 d5ac      	RCALL SUBOPT_0x5
0000b7 01df      	MOVW R26,R30
0000b8 01cb      	MOVW R24,R22
0000b9 2de7      	MOV  R30,R7
0000ba d5ae      	RCALL SUBOPT_0x6
0000bb d78c      	RCALL __ADDF12
0000bc 93e0 0164 	STS  _b,R30
0000be 93f0 0165 	STS  _b+1,R31
0000c0 9360 0166 	STS  _b+2,R22
0000c2 9370 0167 	STS  _b+3,R23
                 ; 0000 003D                 itoa(y , lcd);
0000c4 d590      	RCALL SUBOPT_0x3
0000c5 e7a4      	LDI  R26,LOW(_lcd)
0000c6 e0b1      	LDI  R27,HIGH(_lcd)
0000c7 d2c9      	RCALL _itoa
                 ; 0000 003E                 lcd_puts(lcd);
0000c8 e7a4      	LDI  R26,LOW(_lcd)
0000c9 e0b1      	LDI  R27,HIGH(_lcd)
0000ca d262      	RCALL _lcd_puts
                 ; 0000 003F                 delay_ms(50);
0000cb e3a2      	LDI  R26,LOW(50)
0000cc e0b0      	LDI  R27,0
0000cd d6b9      	RCALL _delay_ms
                 ; 0000 0040         }else if(y == 14){
0000ce c009      	RJMP _0x12
                 _0x11:
0000cf e0ee      	LDI  R30,LOW(14)
0000d0 15e7      	CP   R30,R7
0000d1 f431      	BRNE _0x13
                 ; 0000 0041                 lcd_putchar('=');
0000d2 e3ad      	LDI  R26,LOW(61)
0000d3 d240      	RCALL _lcd_putchar
                 ; 0000 0042                 Mohasebe();
0000d4 d044      	RCALL _Mohasebe
                 ; 0000 0043                 y = 0 ;
0000d5 2477      	CLR  R7
                 ; 0000 0044                 Loop = 0 ;
                +
0000d6 e000     +LDI R16 , LOW ( 0 )
0000d7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0045         }
                 ; 0000 0046         }
                 _0x13:
                 _0x12:
0000d8 cfd2      	RJMP _0xD
                 _0xF:
                 ; 0000 0047 }
                 ; 0000 0048 if( y > 15 ){
                 _0x9:
0000d9 e0ef      	LDI  R30,LOW(15)
0000da 15e7      	CP   R30,R7
0000db f5b0      	BRSH _0x14
                 ; 0000 0049 lcd_clear();
0000dc d22a      	RCALL _lcd_clear
                 ; 0000 004A a= 0 ; b = 0 ; c = 0;
0000dd e0e0      	LDI  R30,LOW(0)
0000de 93e0 0160 	STS  _a,R30
0000e0 93e0 0161 	STS  _a+1,R30
0000e2 93e0 0162 	STS  _a+2,R30
0000e4 93e0 0163 	STS  _a+3,R30
0000e6 93e0 0164 	STS  _b,R30
0000e8 93e0 0165 	STS  _b+1,R30
0000ea 93e0 0166 	STS  _b+2,R30
0000ec 93e0 0167 	STS  _b+3,R30
0000ee 93e0 0168 	STS  _c,R30
0000f0 93e0 0169 	STS  _c+1,R30
0000f2 93e0 016a 	STS  _c+2,R30
0000f4 93e0 016b 	STS  _c+3,R30
                 ; 0000 004B Alamat(y , 2);
0000f6 d55e      	RCALL SUBOPT_0x3
0000f7 e0a2      	LDI  R26,LOW(2)
0000f8 e0b0      	LDI  R27,0
0000f9 d0bb      	RCALL _Alamat
                 ; 0000 004C z = y ;
0000fa 2c67      	MOV  R6,R7
                 ; 0000 004D Loop = 1 ;
                +
0000fb e001     +LDI R16 , LOW ( 1 )
0000fc e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 004E while(Loop){
                 _0x15:
0000fd 2e00      	MOV  R0,R16
0000fe 2a01      	OR   R0,R17
0000ff f091      	BREQ _0x17
                 ; 0000 004F y = key();
000100 d50b      	RCALL SUBOPT_0x0
                 ; 0000 0050 if( y == 15 ){a = 0 ;b = 0 ;c = 0 ;lcd_clear();return 0 ;}
000101 f411      	BRNE _0x18
000102 d50e      	RCALL SUBOPT_0x1
000103 c00e      	RJMP _0x20A000F
                 ; 0000 0051 if(y <  10){
                 _0x18:
000104 e0ea      	LDI  R30,LOW(10)
000105 167e      	CP   R7,R30
000106 f410      	BRSH _0x19
                 ; 0000 0052         a = (a*10) + y ;
000107 d523      	RCALL SUBOPT_0x2
                 ; 0000 0053         itoa(y , lcd);
                 ; 0000 0054         lcd_puts(lcd);
                 ; 0000 0055         delay_ms(50);
                 ; 0000 0056 }else if ( y == 14){
000108 c006      	RJMP _0x1A
                 _0x19:
000109 e0ee      	LDI  R30,LOW(14)
00010a 15e7      	CP   R30,R7
00010b f419      	BRNE _0x1B
                 ; 0000 0057         lcd_putchar('=');
00010c e3ad      	LDI  R26,LOW(61)
00010d d206      	RCALL _lcd_putchar
                 ; 0000 0058         Mohandes();
00010e d04a      	RCALL _Mohandes
                 ; 0000 0059 }
                 ; 0000 005A Loop = 1 ;
                 _0x1B:
                 _0x1A:
                +
00010f e001     +LDI R16 , LOW ( 1 )
000110 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 005B }
000111 cfeb      	RJMP _0x15
                 _0x17:
                 ; 0000 005C }
                 ; 0000 005D return 0;
                 _0x14:
                 _0x20A000F:
                +
000112 e0e0     +LDI R30 , LOW ( 0x0 )
000113 e0f0     +LDI R31 , HIGH ( 0x0 )
000114 e060     +LDI R22 , BYTE3 ( 0x0 )
000115 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000116 9109      	LD   R16,Y+
000117 9119      	LD   R17,Y+
000118 9508      	RET
                 ; 0000 005E }
                 ; .FEND
                 ;//##########################################################
                 ;void Mohasebe(void){
                 ; 0000 0060 void Mohasebe(void){
                 _Mohasebe:
                 ; .FSTART _Mohasebe
                 ; 0000 0061 if(z == 10)c = a / b ;
000119 e0ea      	LDI  R30,LOW(10)
00011a 15e6      	CP   R30,R6
00011b f411      	BRNE _0x1C
00011c d551      	RCALL SUBOPT_0x7
00011d d561      	RCALL SUBOPT_0x8
                 ; 0000 0062 if(z == 11)c = a * b ;
                 _0x1C:
00011e e0eb      	LDI  R30,LOW(11)
00011f 15e6      	CP   R30,R6
000120 f419      	BRNE _0x1D
000121 d54c      	RCALL SUBOPT_0x7
000122 d775      	RCALL __MULF12
000123 d565      	RCALL SUBOPT_0x9
                 ; 0000 0063 if(z == 12)c = a - b ;
                 _0x1D:
000124 e0ec      	LDI  R30,LOW(12)
000125 15e6      	CP   R30,R6
000126 f421      	BRNE _0x1E
000127 d532      	RCALL SUBOPT_0x4
000128 d569      	RCALL SUBOPT_0xA
000129 d717      	RCALL __SUBF12
00012a d55e      	RCALL SUBOPT_0x9
                 ; 0000 0064 if(z == 13)c = a + b ;
                 _0x1E:
00012b e0ed      	LDI  R30,LOW(13)
00012c 15e6      	CP   R30,R6
00012d f419      	BRNE _0x1F
00012e d53f      	RCALL SUBOPT_0x7
00012f d718      	RCALL __ADDF12
000130 d558      	RCALL SUBOPT_0x9
                 ; 0000 0065 ftoa(c , 3 , lcd);
                 _0x1F:
000131 c06e      	RJMP _0x20A000E
                 ; 0000 0066 lcd_puts(lcd);
                 ; 0000 0067 delay_ms(100);
                 ; 0000 0068 }
                 ; .FEND
                 ;//#########################################################
                 ;float Emoji(int rr){
                 ; 0000 006A float Emoji(int rr){
                 _Emoji:
                 ; .FSTART _Emoji
                 ; 0000 006B q=1;
000132 93ba      	ST   -Y,R27
000133 93aa      	ST   -Y,R26
                 ;	rr -> Y+0
000134 d566      	RCALL SUBOPT_0xB
000135 d56a      	RCALL SUBOPT_0xC
                 ; 0000 006C for(i=0;i<rr;i++)q = q * 2.71728 ;
000136 2444      	CLR  R4
000137 2455      	CLR  R5
                 _0x21:
000138 81e8      	LD   R30,Y
000139 81f9      	LDD  R31,Y+1
00013a 164e      	CP   R4,R30
00013b 065f      	CPC  R5,R31
00013c f494      	BRGE _0x22
00013d 91a0 016c 	LDS  R26,_q
00013f 91b0 016d 	LDS  R27,_q+1
000141 9180 016e 	LDS  R24,_q+2
000143 9190 016f 	LDS  R25,_q+3
                +
000145 eeea     +LDI R30 , LOW ( 0x402DE7EA )
000146 eef7     +LDI R31 , HIGH ( 0x402DE7EA )
000147 e26d     +LDI R22 , BYTE3 ( 0x402DE7EA )
000148 e470     +LDI R23 , BYTE4 ( 0x402DE7EA )
                 	__GETD1N 0x402DE7EA
000149 d74e      	RCALL __MULF12
00014a d555      	RCALL SUBOPT_0xC
00014b 01f2      	MOVW R30,R4
00014c 9631      	ADIW R30,1
00014d 012f      	MOVW R4,R30
00014e cfe9      	RJMP _0x21
                 _0x22:
                 ; 0000 006D return q;
00014f 91e0 016c 	LDS  R30,_q
000151 91f0 016d 	LDS  R31,_q+1
000153 9160 016e 	LDS  R22,_q+2
000155 9170 016f 	LDS  R23,_q+3
000157 940c 0305 	JMP  _0x20A000C
                 ; 0000 006E }
                 ; .FEND
                 ;//#########################################################
                 ;void Mohandes(void){
                 ; 0000 0070 void Mohandes(void){
                 _Mohandes:
                 ; .FSTART _Mohandes
                 ; 0000 0071 t = (3.1415926535897932384626433832795/180)*a ;
000159 d538      	RCALL SUBOPT_0xA
                +
00015a e3a5     +LDI R26 , LOW ( 0x3C8EFA35 )
00015b efba     +LDI R27 , HIGH ( 0x3C8EFA35 )
00015c e88e     +LDI R24 , BYTE3 ( 0x3C8EFA35 )
00015d e39c     +LDI R25 , BYTE4 ( 0x3C8EFA35 )
                 	__GETD2N 0x3C8EFA35
00015e d739      	RCALL __MULF12
00015f 93e0 0170 	STS  _t,R30
000161 93f0 0171 	STS  _t+1,R31
000163 9360 0172 	STS  _t+2,R22
000165 9370 0173 	STS  _t+3,R23
                 ; 0000 0072 if(z == 16)c = sin(t) ;
000167 e1e0      	LDI  R30,LOW(16)
000168 15e6      	CP   R30,R6
000169 f419      	BRNE _0x23
00016a d53e      	RCALL SUBOPT_0xD
00016b d37e      	RCALL _sin
00016c d51c      	RCALL SUBOPT_0x9
                 ; 0000 0073 if(z == 17)c = cos(t) ;
                 _0x23:
00016d e1e1      	LDI  R30,LOW(17)
00016e 15e6      	CP   R30,R6
00016f f419      	BRNE _0x24
000170 d538      	RCALL SUBOPT_0xD
000171 d3cc      	RCALL _cos
000172 d516      	RCALL SUBOPT_0x9
                 ; 0000 0074 if(z == 18)c = tan(t) ;
                 _0x24:
000173 e1e2      	LDI  R30,LOW(18)
000174 15e6      	CP   R30,R6
000175 f419      	BRNE _0x25
000176 d532      	RCALL SUBOPT_0xD
000177 d3d0      	RCALL _tan
000178 d510      	RCALL SUBOPT_0x9
                 ; 0000 0075 if(z == 19)c = 1/tan(t) ;
                 _0x25:
000179 e1e3      	LDI  R30,LOW(19)
00017a 15e6      	CP   R30,R6
00017b f421      	BRNE _0x26
00017c d52c      	RCALL SUBOPT_0xD
00017d d3ca      	RCALL _tan
00017e d533      	RCALL SUBOPT_0xE
00017f d4ff      	RCALL SUBOPT_0x8
                 ; 0000 0076 if(z == 20)c = asin(t) ;
                 _0x26:
000180 e1e4      	LDI  R30,LOW(20)
000181 15e6      	CP   R30,R6
000182 f419      	BRNE _0x27
000183 d525      	RCALL SUBOPT_0xD
000184 d427      	RCALL _asin
000185 d503      	RCALL SUBOPT_0x9
                 ; 0000 0077 if(z == 21)c = acos(t) ;
                 _0x27:
000186 e1e5      	LDI  R30,LOW(21)
000187 15e6      	CP   R30,R6
000188 f419      	BRNE _0x28
000189 d51f      	RCALL SUBOPT_0xD
00018a d45e      	RCALL _acos
00018b d4fd      	RCALL SUBOPT_0x9
                 ; 0000 0078 if(z == 22)c = log(a) ;
                 _0x28:
00018c e1e6      	LDI  R30,LOW(22)
00018d 15e6      	CP   R30,R6
00018e f419      	BRNE _0x29
00018f d527      	RCALL SUBOPT_0xF
000190 d2f4      	RCALL _log
000191 d4f7      	RCALL SUBOPT_0x9
                 ; 0000 0079 if(z == 23)c = sqrt(a) ;
                 _0x29:
000192 e1e7      	LDI  R30,LOW(23)
000193 15e6      	CP   R30,R6
000194 f419      	BRNE _0x2A
000195 d521      	RCALL SUBOPT_0xF
000196 d7b4      	RCALL _sqrt
000197 d4f1      	RCALL SUBOPT_0x9
                 ; 0000 007A if(z == 24)c = Emoji(a) ;
                 _0x2A:
000198 e1e8      	LDI  R30,LOW(24)
000199 15e6      	CP   R30,R6
00019a f429      	BRNE _0x2B
00019b d4f6      	RCALL SUBOPT_0xA
00019c d63a      	RCALL __CFD1
00019d 01df      	MOVW R26,R30
00019e df93      	RCALL _Emoji
00019f d4e9      	RCALL SUBOPT_0x9
                 ; 0000 007B ftoa(c , 3 , lcd);
                 _0x2B:
                 _0x20A000E:
0001a0 91e0 0168 	LDS  R30,_c
0001a2 91f0 0169 	LDS  R31,_c+1
0001a4 9160 016a 	LDS  R22,_c+2
0001a6 9170 016b 	LDS  R23,_c+3
0001a8 d7fb      	RCALL __PUTPARD1
0001a9 e0e3      	LDI  R30,LOW(3)
0001aa 93ea      	ST   -Y,R30
0001ab e7a4      	LDI  R26,LOW(_lcd)
0001ac e0b1      	LDI  R27,HIGH(_lcd)
0001ad d211      	RCALL _ftoa
                 ; 0000 007C lcd_puts(lcd);
0001ae e7a4      	LDI  R26,LOW(_lcd)
0001af e0b1      	LDI  R27,HIGH(_lcd)
0001b0 d17c      	RCALL _lcd_puts
                 ; 0000 007D delay_ms(100);
0001b1 e6a4      	LDI  R26,LOW(100)
0001b2 e0b0      	LDI  R27,0
0001b3 d5d3      	RCALL _delay_ms
                 ; 0000 007E }
0001b4 9508      	RET
                 ; .FEND
                 ;//#########################################################
                 ;void Alamat(int Moji,int Halat){
                 ; 0000 0080 void Alamat(int Moji,int Halat){
                 _Alamat:
                 ; .FSTART _Alamat
                 ; 0000 0081 if(Halat == 1){
0001b5 93ba      	ST   -Y,R27
0001b6 93aa      	ST   -Y,R26
                 ;	Moji -> Y+2
                 ;	Halat -> Y+0
0001b7 81a8      	LD   R26,Y
0001b8 81b9      	LDD  R27,Y+1
0001b9 9711      	SBIW R26,1
0001ba f4d9      	BRNE _0x2C
                 ; 0000 0082         if(Moji == 10)lcd_putchar('/') ;
0001bb 81aa      	LDD  R26,Y+2
0001bc 81bb      	LDD  R27,Y+2+1
0001bd 971a      	SBIW R26,10
0001be f411      	BRNE _0x2D
0001bf e2af      	LDI  R26,LOW(47)
0001c0 d153      	RCALL _lcd_putchar
                 ; 0000 0083         if(Moji == 11)lcd_putchar('*') ;
                 _0x2D:
0001c1 81aa      	LDD  R26,Y+2
0001c2 81bb      	LDD  R27,Y+2+1
0001c3 971b      	SBIW R26,11
0001c4 f411      	BRNE _0x2E
0001c5 e2aa      	LDI  R26,LOW(42)
0001c6 d14d      	RCALL _lcd_putchar
                 ; 0000 0084         if(Moji == 12)lcd_putchar('-') ;
                 _0x2E:
0001c7 81aa      	LDD  R26,Y+2
0001c8 81bb      	LDD  R27,Y+2+1
0001c9 971c      	SBIW R26,12
0001ca f411      	BRNE _0x2F
0001cb e2ad      	LDI  R26,LOW(45)
0001cc d147      	RCALL _lcd_putchar
                 ; 0000 0085         if(Moji == 13)lcd_putchar('+') ;
                 _0x2F:
0001cd 81aa      	LDD  R26,Y+2
0001ce 81bb      	LDD  R27,Y+2+1
0001cf 971d      	SBIW R26,13
0001d0 f411      	BRNE _0x30
0001d1 e2ab      	LDI  R26,LOW(43)
0001d2 d141      	RCALL _lcd_putchar
                 ; 0000 0086         delay_ms(100);
                 _0x30:
0001d3 e6a4      	LDI  R26,LOW(100)
0001d4 e0b0      	LDI  R27,0
0001d5 d5b1      	RCALL _delay_ms
                 ; 0000 0087 }
                 ; 0000 0088 if(Halat == 2){
                 _0x2C:
0001d6 81a8      	LD   R26,Y
0001d7 81b9      	LDD  R27,Y+1
0001d8 9712      	SBIW R26,2
0001d9 f009      	BREQ PC+2
0001da c042      	RJMP _0x31
                 ; 0000 0089         if(Moji == 16)lcd_putsf("Sin ") ;
0001db 81aa      	LDD  R26,Y+2
0001dc 81bb      	LDD  R27,Y+2+1
0001dd 9750      	SBIW R26,16
0001de f419      	BRNE _0x32
                +
0001df e5a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001e0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001e1 d15a      	RCALL _lcd_putsf
                 ; 0000 008A         if(Moji == 17)lcd_putsf("Cos ") ;
                 _0x32:
0001e2 81aa      	LDD  R26,Y+2
0001e3 81bb      	LDD  R27,Y+2+1
0001e4 9751      	SBIW R26,17
0001e5 f419      	BRNE _0x33
                +
0001e6 e5ab     +LDI R26 , LOW ( 2 * _0x0 + ( 5 ) )
0001e7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 5 ) )
                 	__POINTW2FN _0x0,5
0001e8 d153      	RCALL _lcd_putsf
                 ; 0000 008B         if(Moji == 18)lcd_putsf("Tan ") ;
                 _0x33:
0001e9 81aa      	LDD  R26,Y+2
0001ea 81bb      	LDD  R27,Y+2+1
0001eb 9752      	SBIW R26,18
0001ec f419      	BRNE _0x34
                +
0001ed e6a0     +LDI R26 , LOW ( 2 * _0x0 + ( 10 ) )
0001ee e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 10 ) )
                 	__POINTW2FN _0x0,10
0001ef d14c      	RCALL _lcd_putsf
                 ; 0000 008C         if(Moji == 19)lcd_putsf("Cot ") ;
                 _0x34:
0001f0 81aa      	LDD  R26,Y+2
0001f1 81bb      	LDD  R27,Y+2+1
0001f2 9753      	SBIW R26,19
0001f3 f419      	BRNE _0x35
                +
0001f4 e6a5     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
0001f5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
0001f6 d145      	RCALL _lcd_putsf
                 ; 0000 008D         if(Moji == 20)lcd_putsf("aSin") ;
                 _0x35:
0001f7 81aa      	LDD  R26,Y+2
0001f8 81bb      	LDD  R27,Y+2+1
0001f9 9754      	SBIW R26,20
0001fa f419      	BRNE _0x36
                +
0001fb e6aa     +LDI R26 , LOW ( 2 * _0x0 + ( 20 ) )
0001fc e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 20 ) )
                 	__POINTW2FN _0x0,20
0001fd d13e      	RCALL _lcd_putsf
                 ; 0000 008E         if(Moji == 21)lcd_putsf("aCos") ;
                 _0x36:
0001fe 81aa      	LDD  R26,Y+2
0001ff 81bb      	LDD  R27,Y+2+1
000200 9755      	SBIW R26,21
000201 f419      	BRNE _0x37
                +
000202 e6af     +LDI R26 , LOW ( 2 * _0x0 + ( 25 ) )
000203 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW2FN _0x0,25
000204 d137      	RCALL _lcd_putsf
                 ; 0000 008F         if(Moji == 22)lcd_putsf("Log ") ;
                 _0x37:
000205 81aa      	LDD  R26,Y+2
000206 81bb      	LDD  R27,Y+2+1
000207 9756      	SBIW R26,22
000208 f419      	BRNE _0x38
                +
000209 e7a4     +LDI R26 , LOW ( 2 * _0x0 + ( 30 ) )
00020a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 30 ) )
                 	__POINTW2FN _0x0,30
00020b d130      	RCALL _lcd_putsf
                 ; 0000 0090         if(Moji == 23)lcd_putsf("Sqrt ") ;
                 _0x38:
00020c 81aa      	LDD  R26,Y+2
00020d 81bb      	LDD  R27,Y+2+1
00020e 9757      	SBIW R26,23
00020f f419      	BRNE _0x39
                +
000210 e7a9     +LDI R26 , LOW ( 2 * _0x0 + ( 35 ) )
000211 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 35 ) )
                 	__POINTW2FN _0x0,35
000212 d129      	RCALL _lcd_putsf
                 ; 0000 0091         if(Moji == 24)lcd_putsf("exp ") ;
                 _0x39:
000213 81aa      	LDD  R26,Y+2
000214 81bb      	LDD  R27,Y+2+1
000215 9758      	SBIW R26,24
000216 f419      	BRNE _0x3A
                +
000217 e7af     +LDI R26 , LOW ( 2 * _0x0 + ( 41 ) )
000218 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 41 ) )
                 	__POINTW2FN _0x0,41
000219 d122      	RCALL _lcd_putsf
                 ; 0000 0092         delay_ms(100);
                 _0x3A:
00021a e6a4      	LDI  R26,LOW(100)
00021b e0b0      	LDI  R27,0
00021c d56a      	RCALL _delay_ms
                 ; 0000 0093 
                 ; 0000 0094 }
                 ; 0000 0095 }
                 _0x31:
00021d 940c 05fd 	JMP  _0x20A0001
                 ; .FEND
                 ;//#########################################################
                 ;int key(void){
                 ; 0000 0097 int key(void){
                 _key:
                 ; .FSTART _key
                 ; 0000 0098 char KEY = 1 ;
                 ; 0000 0099 while(KEY){
00021f 931a      	ST   -Y,R17
                 ;	KEY -> R17
000220 e011      	LDI  R17,1
                 _0x3B:
000221 3010      	CPI  R17,0
000222 f409      	BRNE PC+2
000223 c098      	RJMP _0x3D
                 ; 0000 009A 
                 ; 0000 009B         PORTD.0 = 1 ;
000224 9a90      	SBI  0x12,0
                 ; 0000 009C         PORTD.1 = 0 ;
000225 9891      	CBI  0x12,1
                 ; 0000 009D         PORTD.2 = 0 ;
000226 9892      	CBI  0x12,2
                 ; 0000 009E         PORTD.3 = 0 ;
000227 9893      	CBI  0x12,3
                 ; 0000 009F         if(PIND.4 == 1){return 7 ; KEY = 0;delay_ms(50);}
000228 9b84      	SBIS 0x10,4
000229 c003      	RJMP _0x46
00022a e0e7      	LDI  R30,LOW(7)
00022b e0f0      	LDI  R31,HIGH(7)
00022c c08f      	RJMP _0x20A000D
                 ; 0000 00A0         if(PIND.5 == 1){return 8 ; KEY = 0;delay_ms(50);}
                 _0x46:
00022d 9b85      	SBIS 0x10,5
00022e c003      	RJMP _0x47
00022f e0e8      	LDI  R30,LOW(8)
000230 e0f0      	LDI  R31,HIGH(8)
000231 c08a      	RJMP _0x20A000D
                 ; 0000 00A1         if(PIND.6 == 1){return 9 ; KEY = 0;delay_ms(50);}
                 _0x47:
000232 9b86      	SBIS 0x10,6
000233 c003      	RJMP _0x48
000234 e0e9      	LDI  R30,LOW(9)
000235 e0f0      	LDI  R31,HIGH(9)
000236 c085      	RJMP _0x20A000D
                 ; 0000 00A2         if(PIND.7 == 1){return 10; KEY = 0;delay_ms(50);}
                 _0x48:
000237 9b87      	SBIS 0x10,7
000238 c003      	RJMP _0x49
000239 e0ea      	LDI  R30,LOW(10)
00023a e0f0      	LDI  R31,HIGH(10)
00023b c080      	RJMP _0x20A000D
                 ; 0000 00A3         //==========================================
                 ; 0000 00A4         PORTD.0 = 0 ;
                 _0x49:
00023c 9890      	CBI  0x12,0
                 ; 0000 00A5         PORTD.1 = 1 ;
00023d 9a91      	SBI  0x12,1
                 ; 0000 00A6         PORTD.2 = 0 ;
00023e 9892      	CBI  0x12,2
                 ; 0000 00A7         PORTD.3 = 0 ;
00023f 9893      	CBI  0x12,3
                 ; 0000 00A8         if(PIND.4 == 1){return 4 ; KEY = 0;}
000240 9b84      	SBIS 0x10,4
000241 c003      	RJMP _0x52
000242 e0e4      	LDI  R30,LOW(4)
000243 e0f0      	LDI  R31,HIGH(4)
000244 c077      	RJMP _0x20A000D
                 ; 0000 00A9         if(PIND.5 == 1){return 5 ; KEY = 0;}
                 _0x52:
000245 9b85      	SBIS 0x10,5
000246 c003      	RJMP _0x53
000247 e0e5      	LDI  R30,LOW(5)
000248 e0f0      	LDI  R31,HIGH(5)
000249 c072      	RJMP _0x20A000D
                 ; 0000 00AA         if(PIND.6 == 1){return 6 ; KEY = 0;}
                 _0x53:
00024a 9b86      	SBIS 0x10,6
00024b c003      	RJMP _0x54
00024c e0e6      	LDI  R30,LOW(6)
00024d e0f0      	LDI  R31,HIGH(6)
00024e c06d      	RJMP _0x20A000D
                 ; 0000 00AB         if(PIND.7 == 1){return 11; KEY = 0;}
                 _0x54:
00024f 9b87      	SBIS 0x10,7
000250 c003      	RJMP _0x55
000251 e0eb      	LDI  R30,LOW(11)
000252 e0f0      	LDI  R31,HIGH(11)
000253 c068      	RJMP _0x20A000D
                 ; 0000 00AC         //==========================================
                 ; 0000 00AD         PORTD.0 = 0 ;
                 _0x55:
000254 9890      	CBI  0x12,0
                 ; 0000 00AE         PORTD.1 = 0 ;
000255 9891      	CBI  0x12,1
                 ; 0000 00AF         PORTD.2 = 1 ;
000256 9a92      	SBI  0x12,2
                 ; 0000 00B0         PORTD.3 = 0 ;
000257 9893      	CBI  0x12,3
                 ; 0000 00B1         if(PIND.4 == 1){return 1 ; KEY = 0;}
000258 9b84      	SBIS 0x10,4
000259 c003      	RJMP _0x5E
00025a e0e1      	LDI  R30,LOW(1)
00025b e0f0      	LDI  R31,HIGH(1)
00025c c05f      	RJMP _0x20A000D
                 ; 0000 00B2         if(PIND.5 == 1){return 2 ; KEY = 0;}
                 _0x5E:
00025d 9b85      	SBIS 0x10,5
00025e c003      	RJMP _0x5F
00025f e0e2      	LDI  R30,LOW(2)
000260 e0f0      	LDI  R31,HIGH(2)
000261 c05a      	RJMP _0x20A000D
                 ; 0000 00B3         if(PIND.6 == 1){return 3 ; KEY = 0;}
                 _0x5F:
000262 9b86      	SBIS 0x10,6
000263 c003      	RJMP _0x60
000264 e0e3      	LDI  R30,LOW(3)
000265 e0f0      	LDI  R31,HIGH(3)
000266 c055      	RJMP _0x20A000D
                 ; 0000 00B4         if(PIND.7 == 1){return 12; KEY = 0;}
                 _0x60:
000267 9b87      	SBIS 0x10,7
000268 c003      	RJMP _0x61
000269 e0ec      	LDI  R30,LOW(12)
00026a e0f0      	LDI  R31,HIGH(12)
00026b c050      	RJMP _0x20A000D
                 ; 0000 00B5         //==========================================
                 ; 0000 00B6         PORTD.0 = 0 ;
                 _0x61:
00026c 9890      	CBI  0x12,0
                 ; 0000 00B7         PORTD.1 = 0 ;
00026d 9891      	CBI  0x12,1
                 ; 0000 00B8         PORTD.2 = 0 ;
00026e 9892      	CBI  0x12,2
                 ; 0000 00B9         PORTD.3 = 1 ;
00026f 9a93      	SBI  0x12,3
                 ; 0000 00BA         if(PIND.4 == 1){return 15; KEY = 0;}
000270 9b84      	SBIS 0x10,4
000271 c003      	RJMP _0x6A
000272 e0ef      	LDI  R30,LOW(15)
000273 e0f0      	LDI  R31,HIGH(15)
000274 c047      	RJMP _0x20A000D
                 ; 0000 00BB         if(PIND.5 == 1){return 0 ; KEY = 0;}
                 _0x6A:
000275 9b85      	SBIS 0x10,5
000276 c003      	RJMP _0x6B
000277 e0e0      	LDI  R30,LOW(0)
000278 e0f0      	LDI  R31,HIGH(0)
000279 c042      	RJMP _0x20A000D
                 ; 0000 00BC         if(PIND.6 == 1){return 14; KEY = 0;}
                 _0x6B:
00027a 9b86      	SBIS 0x10,6
00027b c003      	RJMP _0x6C
00027c e0ee      	LDI  R30,LOW(14)
00027d e0f0      	LDI  R31,HIGH(14)
00027e c03d      	RJMP _0x20A000D
                 ; 0000 00BD         if(PIND.7 == 1){return 13; KEY = 0;}
                 _0x6C:
00027f 9b87      	SBIS 0x10,7
000280 c003      	RJMP _0x6D
000281 e0ed      	LDI  R30,LOW(13)
000282 e0f0      	LDI  R31,HIGH(13)
000283 c038      	RJMP _0x20A000D
                 ; 0000 00BE 
                 ; 0000 00BF         //=============================================================================
                 ; 0000 00C0         PORTC.0 = 1 ;
                 _0x6D:
000284 9aa8      	SBI  0x15,0
                 ; 0000 00C1         PORTC.1 = 0 ;
000285 98a9      	CBI  0x15,1
                 ; 0000 00C2         PORTC.2 = 0 ;
000286 98aa      	CBI  0x15,2
                 ; 0000 00C3         if(PINC.5 == 1){return 16 ; KEY=0;}
000287 9b9d      	SBIS 0x13,5
000288 c003      	RJMP _0x74
000289 e1e0      	LDI  R30,LOW(16)
00028a e0f0      	LDI  R31,HIGH(16)
00028b c030      	RJMP _0x20A000D
                 ; 0000 00C4         if(PINC.6 == 1){return 17; KEY=0;}
                 _0x74:
00028c 9b9e      	SBIS 0x13,6
00028d c003      	RJMP _0x75
00028e e1e1      	LDI  R30,LOW(17)
00028f e0f0      	LDI  R31,HIGH(17)
000290 c02b      	RJMP _0x20A000D
                 ; 0000 00C5         if(PINC.7 == 1){return 18 ; KEY=0;}
                 _0x75:
000291 9b9f      	SBIS 0x13,7
000292 c003      	RJMP _0x76
000293 e1e2      	LDI  R30,LOW(18)
000294 e0f0      	LDI  R31,HIGH(18)
000295 c026      	RJMP _0x20A000D
                 ; 0000 00C6         //=====================================================
                 ; 0000 00C7         PORTC.0 = 0 ;
                 _0x76:
000296 98a8      	CBI  0x15,0
                 ; 0000 00C8         PORTC.1 = 1 ;
000297 9aa9      	SBI  0x15,1
                 ; 0000 00C9         PORTC.2 = 0 ;
000298 98aa      	CBI  0x15,2
                 ; 0000 00CA         if(PINC.5 == 1){return 19 ; KEY=0;}
000299 9b9d      	SBIS 0x13,5
00029a c003      	RJMP _0x7D
00029b e1e3      	LDI  R30,LOW(19)
00029c e0f0      	LDI  R31,HIGH(19)
00029d c01e      	RJMP _0x20A000D
                 ; 0000 00CB         if(PINC.6 == 1){return 20 ; KEY=0;}
                 _0x7D:
00029e 9b9e      	SBIS 0x13,6
00029f c003      	RJMP _0x7E
0002a0 e1e4      	LDI  R30,LOW(20)
0002a1 e0f0      	LDI  R31,HIGH(20)
0002a2 c019      	RJMP _0x20A000D
                 ; 0000 00CC         if(PINC.7 == 1){return 21 ; KEY=0;}
                 _0x7E:
0002a3 9b9f      	SBIS 0x13,7
0002a4 c003      	RJMP _0x7F
0002a5 e1e5      	LDI  R30,LOW(21)
0002a6 e0f0      	LDI  R31,HIGH(21)
0002a7 c014      	RJMP _0x20A000D
                 ; 0000 00CD         //=====================================================
                 ; 0000 00CE         PORTC.0 = 0 ;
                 _0x7F:
0002a8 98a8      	CBI  0x15,0
                 ; 0000 00CF         PORTC.1 = 0 ;
0002a9 98a9      	CBI  0x15,1
                 ; 0000 00D0         PORTC.2 = 1 ;
0002aa 9aaa      	SBI  0x15,2
                 ; 0000 00D1         if(PINC.5 == 1){return 22 ; KEY=0;}
0002ab 9b9d      	SBIS 0x13,5
0002ac c003      	RJMP _0x86
0002ad e1e6      	LDI  R30,LOW(22)
0002ae e0f0      	LDI  R31,HIGH(22)
0002af c00c      	RJMP _0x20A000D
                 ; 0000 00D2         if(PINC.6 == 1){return 23 ; KEY=0;}
                 _0x86:
0002b0 9b9e      	SBIS 0x13,6
0002b1 c003      	RJMP _0x87
0002b2 e1e7      	LDI  R30,LOW(23)
0002b3 e0f0      	LDI  R31,HIGH(23)
0002b4 c007      	RJMP _0x20A000D
                 ; 0000 00D3         if(PINC.7 == 1){return 24 ; KEY=0;}
                 _0x87:
0002b5 9b9f      	SBIS 0x13,7
0002b6 c003      	RJMP _0x88
0002b7 e1e8      	LDI  R30,LOW(24)
0002b8 e0f0      	LDI  R31,HIGH(24)
0002b9 c002      	RJMP _0x20A000D
                 ; 0000 00D4 
                 ; 0000 00D5 KEY = 1 ;
                 _0x88:
0002ba e011      	LDI  R17,LOW(1)
                 ; 0000 00D6 }
0002bb cf65      	RJMP _0x3B
                 _0x3D:
                 ; 0000 00D7 }
                 _0x20A000D:
0002bc 9119      	LD   R17,Y+
0002bd 9508      	RET
                 ; .FEND
                 ;//############################################################
                 ;
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
0002be e0ff          ldi   r31,15
                 __lcd_delay0:
0002bf 95fa          dec   r31
0002c0 f7f1          brne  __lcd_delay0
0002c1 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
0002c2 b3a7          in    r26,__lcd_direction
0002c3 70af          andi  r26,0xf                 ;set as input
0002c4 bba7          out   __lcd_direction,r26
0002c5 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0002c6 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0002c7 dff6      	RCALL __lcd_delay_G100
0002c8 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0002c9 dff4      	RCALL __lcd_delay_G100
0002ca b3a6          in    r26,__lcd_pin
0002cb 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0002cc dff1      	RCALL __lcd_delay_G100
0002cd 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0002ce dfef      	RCALL __lcd_delay_G100
0002cf 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0002d0 fda7          sbrc  r26,__lcd_busy_flag
0002d1 cff5          rjmp  __lcd_busy
0002d2 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002d3 7fa0          andi  r26,0xf0
0002d4 2bab          or    r26,r27
0002d5 bba8          out   __lcd_port,r26          ;write
0002d6 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0002d7 dfe6      	RCALL __lcd_delay_G100
0002d8 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0002d9 dfe4      	RCALL __lcd_delay_G100
0002da 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002db 93aa      	ST   -Y,R26
0002dc 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0002dd b3a7          in    r26,__lcd_direction
0002de 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0002df bba7          out   __lcd_direction,r26
0002e0 b3b8          in    r27,__lcd_port
0002e1 70bf          andi  r27,0xf
0002e2 81a8          ld    r26,y
0002e3 dfef      	RCALL __lcd_write_nibble_G100
0002e4 81a8          ld    r26,y
0002e5 95a2          swap  r26
0002e6 dfec      	RCALL __lcd_write_nibble_G100
0002e7 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0002e8 940c 038f 	JMP  _0x20A000A
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0002ea 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0002eb dfd2      	RCALL __lcd_delay_G100
0002ec b3e6          in    r30,__lcd_pin           ;read
0002ed 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0002ee dfcf      	RCALL __lcd_delay_G100
0002ef 7fe0          andi  r30,0xf0
0002f0 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0002f1 dfcc      	RCALL __lcd_delay_G100
0002f2 dff7      	RCALL __lcd_read_nibble_G100
0002f3 2fae          mov   r26,r30
0002f4 dff5      	RCALL __lcd_read_nibble_G100
0002f5 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
0002f6 95e2          swap  r30
0002f7 2bea          or    r30,r26
0002f8 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002f9 93aa      	ST   -Y,R26
0002fa dfc7      	RCALL __lcd_ready
0002fb 81e8      	LD   R30,Y
0002fc e0f0      	LDI  R31,0
0002fd 57e3      	SUBI R30,LOW(-__base_y_G100)
0002fe 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0002ff 81e0      	LD   R30,Z
000300 81a9      	LDD  R26,Y+1
000301 0fae      	ADD  R26,R30
000302 dfd8      	RCALL __lcd_write_data
000303 8099      	LDD  R9,Y+1
000304 8088      	LDD  R8,Y+0
                 _0x20A000C:
000305 9622      	ADIW R28,2
000306 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000307 dfba      	RCALL __lcd_ready
000308 e0a2      	LDI  R26,LOW(2)
000309 dfd1      	RCALL __lcd_write_data
00030a dfb7      	RCALL __lcd_ready
00030b e0ac      	LDI  R26,LOW(12)
00030c dfce      	RCALL __lcd_write_data
00030d dfb4      	RCALL __lcd_ready
00030e e0a1      	LDI  R26,LOW(1)
00030f dfcb      	RCALL __lcd_write_data
000310 e0e0      	LDI  R30,LOW(0)
000311 2e8e      	MOV  R8,R30
000312 2e9e      	MOV  R9,R30
000313 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000314 93aa      	ST   -Y,R26
000315 93ef          push r30
000316 93ff          push r31
000317 81a8          ld   r26,y
000318 9468          set
000319 30aa          cpi  r26,10
00031a f019          breq __lcd_putchar1
00031b 94e8          clt
00031c 149b      	CP   R9,R11
00031d f030      	BRLO _0x2000004
                 	__lcd_putchar1:
00031e 9483      	INC  R8
00031f e0e0      	LDI  R30,LOW(0)
000320 93ea      	ST   -Y,R30
000321 2da8      	MOV  R26,R8
000322 dfd6      	RCALL _lcd_gotoxy
000323 f02e      	brts __lcd_putchar0
                 _0x2000004:
000324 9493      	INC  R9
000325 df9c          rcall __lcd_ready
000326 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000327 81a8      	LD   R26,Y
000328 dfb2      	RCALL __lcd_write_data
                 __lcd_putchar0:
000329 91ff          pop  r31
00032a 91ef          pop  r30
00032b 940c 038f 	JMP  _0x20A000A
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00032d 93ba      	ST   -Y,R27
00032e 93aa      	ST   -Y,R26
00032f 931a      	ST   -Y,R17
                 _0x2000005:
000330 81a9      	LDD  R26,Y+1
000331 81ba      	LDD  R27,Y+1+1
000332 91ed      	LD   R30,X+
000333 83a9      	STD  Y+1,R26
000334 83ba      	STD  Y+1+1,R27
000335 2f1e      	MOV  R17,R30
000336 30e0      	CPI  R30,0
000337 f019      	BREQ _0x2000007
000338 2fa1      	MOV  R26,R17
000339 dfda      	RCALL _lcd_putchar
00033a cff5      	RJMP _0x2000005
                 _0x2000007:
00033b c010      	RJMP _0x20A000B
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00033c 93ba      	ST   -Y,R27
00033d 93aa      	ST   -Y,R26
00033e 931a      	ST   -Y,R17
                 _0x2000008:
00033f 81e9      	LDD  R30,Y+1
000340 81fa      	LDD  R31,Y+1+1
000341 9631      	ADIW R30,1
000342 83e9      	STD  Y+1,R30
000343 83fa      	STD  Y+1+1,R31
000344 9731      	SBIW R30,1
000345 91e4      	LPM  R30,Z
000346 2f1e      	MOV  R17,R30
000347 30e0      	CPI  R30,0
000348 f019      	BREQ _0x200000A
000349 2fa1      	MOV  R26,R17
00034a dfc9      	RCALL _lcd_putchar
00034b cff3      	RJMP _0x2000008
                 _0x200000A:
                 _0x20A000B:
00034c 8118      	LDD  R17,Y+0
00034d 9623      	ADIW R28,3
00034e 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
00034f 27aa          clr   r26
000350 27bb          clr   r27
                 __long_delay0:
000351 9711          sbiw  r26,1         ;2 cycles
000352 f7f1          brne  __long_delay0 ;2 cycles
000353 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000354 93aa      	ST   -Y,R26
000355 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000356 b3a7          in    r26,__lcd_direction
000357 6fa7          ori   r26,0xf7                ;set as output
000358 bba7          out   __lcd_direction,r26
000359 b3b8          in    r27,__lcd_port
00035a 70bf          andi  r27,0xf
00035b 81a8          ld    r26,y
00035c df76      	RCALL __lcd_write_nibble_G100
00035d 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
00035e c030      	RJMP _0x20A000A
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00035f 93aa      	ST   -Y,R26
000360 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000361 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000362 80b8      	LDD  R11,Y+0
000363 81e8      	LD   R30,Y
000364 58e0      	SUBI R30,-LOW(128)
                +
000365 93e0 018f+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000367 81e8      	LD   R30,Y
000368 54e0      	SUBI R30,-LOW(192)
                +
000369 93e0 0190+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00036b dfe3      	RCALL __long_delay_G100
00036c e3a0      	LDI  R26,LOW(48)
00036d dfe6      	RCALL __lcd_init_write_G100
00036e dfe0      	RCALL __long_delay_G100
00036f e3a0      	LDI  R26,LOW(48)
000370 dfe3      	RCALL __lcd_init_write_G100
000371 dfdd      	RCALL __long_delay_G100
000372 e3a0      	LDI  R26,LOW(48)
000373 dfe0      	RCALL __lcd_init_write_G100
000374 dfda      	RCALL __long_delay_G100
000375 e2a0      	LDI  R26,LOW(32)
000376 dfdd      	RCALL __lcd_init_write_G100
000377 dfd7      	RCALL __long_delay_G100
000378 e2a8      	LDI  R26,LOW(40)
000379 df61      	RCALL __lcd_write_data
00037a dfd4      	RCALL __long_delay_G100
00037b e0a4      	LDI  R26,LOW(4)
00037c df5e      	RCALL __lcd_write_data
00037d dfd1      	RCALL __long_delay_G100
00037e e8a5      	LDI  R26,LOW(133)
00037f df5b      	RCALL __lcd_write_data
000380 dfce      	RCALL __long_delay_G100
000381 b3a7          in    r26,__lcd_direction
000382 70af          andi  r26,0xf                 ;set as input
000383 bba7          out   __lcd_direction,r26
000384 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000385 df6b      	RCALL _lcd_read_byte0_G100
000386 30e5      	CPI  R30,LOW(0x5)
000387 f011      	BREQ _0x200000B
000388 e0e0      	LDI  R30,LOW(0)
000389 c005      	RJMP _0x20A000A
                 _0x200000B:
00038a df37      	RCALL __lcd_ready
00038b e0a6      	LDI  R26,LOW(6)
00038c df4e      	RCALL __lcd_write_data
00038d df79      	RCALL _lcd_clear
00038e e0e1      	LDI  R30,LOW(1)
                 _0x20A000A:
00038f 9621      	ADIW R28,1
000390 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000391 93ba      	ST   -Y,R27
000392 93aa      	ST   -Y,R26
000393 91a9          ld   r26,y+
000394 91b9          ld   r27,y+
000395 91e9          ld   r30,y+
000396 91f9          ld   r31,y+
000397 9630          adiw r30,0
000398 f42a          brpl __itoa0
000399 95e0          com  r30
00039a 95f0          com  r31
00039b 9631          adiw r30,1
00039c e26d          ldi  r22,'-'
00039d 936d          st   x+,r22
                 __itoa0:
00039e 94e8          clt
00039f e180          ldi  r24,low(10000)
0003a0 e297          ldi  r25,high(10000)
0003a1 d00d          rcall __itoa1
0003a2 ee88          ldi  r24,low(1000)
0003a3 e093          ldi  r25,high(1000)
0003a4 d00a          rcall __itoa1
0003a5 e684          ldi  r24,100
0003a6 2799          clr  r25
0003a7 d007          rcall __itoa1
0003a8 e08a          ldi  r24,10
0003a9 d005          rcall __itoa1
0003aa 2f6e          mov  r22,r30
0003ab d010          rcall __itoa5
0003ac 2766          clr  r22
0003ad 936c          st   x,r22
0003ae 9508          ret
                 
                 __itoa1:
0003af 2766          clr	 r22
                 __itoa2:
0003b0 17e8          cp   r30,r24
0003b1 07f9          cpc  r31,r25
0003b2 f020          brlo __itoa3
0003b3 9563          inc  r22
0003b4 1be8          sub  r30,r24
0003b5 0bf9          sbc  r31,r25
0003b6 f7c9          brne __itoa2
                 __itoa3:
0003b7 2366          tst  r22
0003b8 f411          brne __itoa4
0003b9 f016          brts __itoa5
0003ba 9508          ret
                 __itoa4:
0003bb 9468          set
                 __itoa5:
0003bc 5d60          subi r22,-0x30
0003bd 936d          st   x+,r22
0003be 9508          ret
                 ; .FEND
                 _ftoa:
                 ; .FSTART _ftoa
0003bf 93ba      	ST   -Y,R27
0003c0 93aa      	ST   -Y,R26
0003c1 9724      	SBIW R28,4
0003c2 e0e0      	LDI  R30,LOW(0)
0003c3 83e8      	ST   Y,R30
0003c4 83e9      	STD  Y+1,R30
0003c5 83ea      	STD  Y+2,R30
0003c6 e3ef      	LDI  R30,LOW(63)
0003c7 83eb      	STD  Y+3,R30
0003c8 931a      	ST   -Y,R17
0003c9 930a      	ST   -Y,R16
0003ca 85eb      	LDD  R30,Y+11
0003cb 85fc      	LDD  R31,Y+11+1
0003cc 3fef      	CPI  R30,LOW(0xFFFF)
0003cd efaf      	LDI  R26,HIGH(0xFFFF)
0003ce 07fa      	CPC  R31,R26
0003cf f429      	BRNE _0x202000D
0003d0 d2f3      	RCALL SUBOPT_0x11
                +
0003d1 e8a8     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
0003d2 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
0003d3 d22b      	RCALL _strcpyf
0003d4 c072      	RJMP _0x20A0009
                 _0x202000D:
0003d5 3fef      	CPI  R30,LOW(0x7FFF)
0003d6 e7af      	LDI  R26,HIGH(0x7FFF)
0003d7 07fa      	CPC  R31,R26
0003d8 f429      	BRNE _0x202000C
0003d9 d2ea      	RCALL SUBOPT_0x11
                +
0003da e8a9     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
0003db e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
0003dc d222      	RCALL _strcpyf
0003dd c069      	RJMP _0x20A0009
                 _0x202000C:
0003de 85ac      	LDD  R26,Y+12
0003df 23aa      	TST  R26
0003e0 f432      	BRPL _0x202000F
0003e1 d2e7      	RCALL SUBOPT_0x12
0003e2 d3bf      	RCALL __ANEGF1
0003e3 d2ea      	RCALL SUBOPT_0x13
0003e4 d2ee      	RCALL SUBOPT_0x14
0003e5 e2ed      	LDI  R30,LOW(45)
0003e6 93ec      	ST   X,R30
                 _0x202000F:
0003e7 85a8      	LDD  R26,Y+8
0003e8 30a7      	CPI  R26,LOW(0x7)
0003e9 f010      	BRLO _0x2020010
0003ea e0e6      	LDI  R30,LOW(6)
0003eb 87e8      	STD  Y+8,R30
                 _0x2020010:
0003ec 8518      	LDD  R17,Y+8
                 _0x2020011:
0003ed 2fe1      	MOV  R30,R17
0003ee 5011      	SUBI R17,1
0003ef 30e0      	CPI  R30,0
0003f0 f021      	BREQ _0x2020013
0003f1 d2e8      	RCALL SUBOPT_0x15
0003f2 d2ec      	RCALL SUBOPT_0x16
0003f3 d2f1      	RCALL SUBOPT_0x17
0003f4 cff8      	RJMP _0x2020011
                 _0x2020013:
0003f5 d2f4      	RCALL SUBOPT_0x18
0003f6 d451      	RCALL __ADDF12
0003f7 d2d6      	RCALL SUBOPT_0x13
0003f8 e010      	LDI  R17,LOW(0)
0003f9 d2a1      	RCALL SUBOPT_0xB
0003fa d2ea      	RCALL SUBOPT_0x17
                 _0x2020014:
0003fb d2ee      	RCALL SUBOPT_0x18
0003fc d52e      	RCALL __CMPF12
0003fd f060      	BRLO _0x2020016
0003fe d2db      	RCALL SUBOPT_0x15
0003ff d263      	RCALL SUBOPT_0x5
000400 d2e4      	RCALL SUBOPT_0x17
000401 5f1f      	SUBI R17,-LOW(1)
000402 3217      	CPI  R17,39
000403 f028      	BRLO _0x2020017
000404 d2bf      	RCALL SUBOPT_0x11
                +
000405 e8ad     +LDI R26 , LOW ( 2 * _0x2020000 + ( 5 ) )
000406 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 5 ) )
                 	__POINTW2FN _0x2020000,5
000407 d1f7      	RCALL _strcpyf
000408 c03e      	RJMP _0x20A0009
                 _0x2020017:
000409 cff1      	RJMP _0x2020014
                 _0x2020016:
00040a 3010      	CPI  R17,0
00040b f421      	BRNE _0x2020018
00040c d2c6      	RCALL SUBOPT_0x14
00040d e3e0      	LDI  R30,LOW(48)
00040e 93ec      	ST   X,R30
00040f c01a      	RJMP _0x2020019
                 _0x2020018:
                 _0x202001A:
000410 2fe1      	MOV  R30,R17
000411 5011      	SUBI R17,1
000412 30e0      	CPI  R30,0
000413 f0b1      	BREQ _0x202001C
000414 d2c5      	RCALL SUBOPT_0x15
000415 d2c9      	RCALL SUBOPT_0x16
000416 d2dc      	RCALL SUBOPT_0x19
000417 d430      	RCALL __ADDF12
000418 01df      	MOVW R26,R30
000419 01cb      	MOVW R24,R22
00041a d060      	RCALL _floor
00041b d2c9      	RCALL SUBOPT_0x17
00041c d2cd      	RCALL SUBOPT_0x18
00041d d4c8      	RCALL __DIVF21
00041e d3b6      	RCALL __CFD1U
00041f 2f0e      	MOV  R16,R30
000420 d2b2      	RCALL SUBOPT_0x14
000421 d2d6      	RCALL SUBOPT_0x1A
000422 d2b7      	RCALL SUBOPT_0x15
000423 d245      	RCALL SUBOPT_0x6
000424 d473      	RCALL __MULF12
000425 d2d7      	RCALL SUBOPT_0x1B
000426 d587      	RCALL __SWAPD12
000427 d419      	RCALL __SUBF12
000428 d2a5      	RCALL SUBOPT_0x13
000429 cfe6      	RJMP _0x202001A
                 _0x202001C:
                 _0x2020019:
00042a 85e8      	LDD  R30,Y+8
00042b 30e0      	CPI  R30,0
00042c f0b1      	BREQ _0x20A0008
00042d d2a5      	RCALL SUBOPT_0x14
00042e e2ee      	LDI  R30,LOW(46)
00042f 93ec      	ST   X,R30
                 _0x202001E:
000430 85e8      	LDD  R30,Y+8
000431 50e1      	SUBI R30,LOW(1)
000432 87e8      	STD  Y+8,R30
000433 5fef      	SUBI R30,-LOW(1)
000434 f071      	BREQ _0x2020020
000435 d2c7      	RCALL SUBOPT_0x1B
000436 d22c      	RCALL SUBOPT_0x5
000437 d296      	RCALL SUBOPT_0x13
000438 d290      	RCALL SUBOPT_0x12
000439 d39b      	RCALL __CFD1U
00043a 2f0e      	MOV  R16,R30
00043b d297      	RCALL SUBOPT_0x14
00043c d2bb      	RCALL SUBOPT_0x1A
00043d d2bf      	RCALL SUBOPT_0x1B
00043e d22a      	RCALL SUBOPT_0x6
00043f d56e      	RCALL __SWAPD12
000440 d400      	RCALL __SUBF12
000441 d28c      	RCALL SUBOPT_0x13
000442 cfed      	RJMP _0x202001E
                 _0x2020020:
                 _0x20A0008:
000443 81ae      	LDD  R26,Y+6
000444 81bf      	LDD  R27,Y+6+1
000445 e0e0      	LDI  R30,LOW(0)
000446 93ec      	ST   X,R30
                 _0x20A0009:
000447 8119      	LDD  R17,Y+1
000448 8108      	LDD  R16,Y+0
000449 962d      	ADIW R28,13
00044a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
00044b d55d      	RCALL __PUTPARD2
00044c 817b         ldd  r23,y+3
00044d 816a         ldd  r22,y+2
00044e 81f9         ldd  r31,y+1
00044f 81e8         ld   r30,y
000450 fb77         bst  r23,7
000451 0f77         lsl  r23
000452 fd67         sbrc r22,7
000453 6071         sbr  r23,1
000454 2f97         mov  r25,r23
000455 579e         subi r25,0x7e
000456 f081         breq __ftrunc0
000457 f078         brcs __ftrunc0
000458 3198         cpi  r25,24
000459 f490         brsh __ftrunc1
00045a 27aa         clr  r26
00045b 27bb         clr  r27
00045c 2788         clr  r24
                 __ftrunc2:
00045d 9408         sec
00045e 9587         ror  r24
00045f 95b7         ror  r27
000460 95a7         ror  r26
000461 959a         dec  r25
000462 f7d1         brne __ftrunc2
000463 23ea         and  r30,r26
000464 23fb         and  r31,r27
000465 2368         and  r22,r24
000466 c005         rjmp __ftrunc1
                 __ftrunc0:
000467 94e8         clt
000468 2777         clr  r23
000469 27ee         clr  r30
00046a 27ff         clr  r31
00046b 2766         clr  r22
                 __ftrunc1:
00046c 776f         cbr  r22,0x80
00046d 9576         lsr  r23
00046e f408         brcc __ftrunc3
00046f 6860         sbr  r22,0x80
                 __ftrunc3:
000470 f977         bld  r23,7
000471 91a9         ld   r26,y+
000472 91b9         ld   r27,y+
000473 9189         ld   r24,y+
000474 9199         ld   r25,y+
000475 17ea         cp   r30,r26
000476 07fb         cpc  r31,r27
000477 0768         cpc  r22,r24
000478 0779         cpc  r23,r25
000479 fb97         bst  r25,7
00047a 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00047b d286      	RCALL SUBOPT_0x1C
00047c dfce      	RCALL _ftrunc
00047d d287      	RCALL SUBOPT_0x1D
00047e f411          brne __floor1
                 __floor0:
00047f d287      	RCALL SUBOPT_0x1E
000480 c17c      	RJMP _0x20A0001
                 __floor1:
000481 f7ee          brtc __floor0
000482 d284      	RCALL SUBOPT_0x1E
000483 d22e      	RCALL SUBOPT_0xE
000484 c177      	RJMP _0x20A0003
                 ; .FEND
                 _log:
                 ; .FSTART _log
000485 d523      	RCALL __PUTPARD2
000486 9724      	SBIW R28,4
000487 931a      	ST   -Y,R17
000488 930a      	ST   -Y,R16
000489 d27f      	RCALL SUBOPT_0x1F
00048a d534      	RCALL __CPD02
00048b f014      	BRLT _0x204000C
00048c d281      	RCALL SUBOPT_0x20
00048d c058      	RJMP _0x20A0007
                 _0x204000C:
00048e d284      	RCALL SUBOPT_0x21
00048f d514      	RCALL __PUTPARD1
000490 b7ad      	IN   R26,SPL
000491 b7be      	IN   R27,SPH
000492 9711      	SBIW R26,1
000493 931f      	PUSH R17
000494 930f      	PUSH R16
000495 d2fb      	RCALL _frexp
000496 910f      	POP  R16
000497 911f      	POP  R17
000498 d27f      	RCALL SUBOPT_0x22
000499 d26f      	RCALL SUBOPT_0x1F
00049a d282      	RCALL SUBOPT_0x23
00049b f430      	BRSH _0x204000D
00049c d276      	RCALL SUBOPT_0x21
00049d d26b      	RCALL SUBOPT_0x1F
00049e d3a9      	RCALL __ADDF12
00049f d278      	RCALL SUBOPT_0x22
                +
0004a0 5001     +SUBI R16 , LOW ( 1 )
0004a1 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x204000D:
0004a2 d270      	RCALL SUBOPT_0x21
0004a3 d20e      	RCALL SUBOPT_0xE
0004a4 d39c      	RCALL __SUBF12
0004a5 937f      	PUSH R23
0004a6 936f      	PUSH R22
0004a7 93ff      	PUSH R31
0004a8 93ef      	PUSH R30
0004a9 d269      	RCALL SUBOPT_0x21
0004aa d207      	RCALL SUBOPT_0xE
0004ab d39c      	RCALL __ADDF12
0004ac 91af      	POP  R26
0004ad 91bf      	POP  R27
0004ae 918f      	POP  R24
0004af 919f      	POP  R25
0004b0 d435      	RCALL __DIVF21
0004b1 d266      	RCALL SUBOPT_0x22
0004b2 d260      	RCALL SUBOPT_0x21
0004b3 d255      	RCALL SUBOPT_0x1F
0004b4 d3e3      	RCALL __MULF12
0004b5 d22f      	RCALL SUBOPT_0x17
0004b6 d26c      	RCALL SUBOPT_0x24
                +
0004b7 e2a6     +LDI R26 , LOW ( 0x3F654226 )
0004b8 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0004b9 e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0004ba e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0004bb d3dc      	RCALL __MULF12
0004bc 01df      	MOVW R26,R30
0004bd 01cb      	MOVW R24,R22
                +
0004be e4ee     +LDI R30 , LOW ( 0x4054114E )
0004bf e1f1     +LDI R31 , HIGH ( 0x4054114E )
0004c0 e564     +LDI R22 , BYTE3 ( 0x4054114E )
0004c1 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0004c2 d4eb      	RCALL __SWAPD12
0004c3 d37d      	RCALL __SUBF12
0004c4 d244      	RCALL SUBOPT_0x1F
0004c5 d3d2      	RCALL __MULF12
0004c6 937f      	PUSH R23
0004c7 936f      	PUSH R22
0004c8 93ff      	PUSH R31
0004c9 93ef      	PUSH R30
0004ca d258      	RCALL SUBOPT_0x24
                +
0004cb e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0004cc e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
0004cd ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
0004ce e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
0004cf d371      	RCALL __SUBF12
0004d0 91af      	POP  R26
0004d1 91bf      	POP  R27
0004d2 918f      	POP  R24
0004d3 919f      	POP  R25
0004d4 d411      	RCALL __DIVF21
0004d5 937f      	PUSH R23
0004d6 936f      	PUSH R22
0004d7 93ff      	PUSH R31
0004d8 93ef      	PUSH R30
0004d9 01f8      	MOVW R30,R16
0004da d4b5      	RCALL __CWD1
0004db d332      	RCALL __CDF1
                +
0004dc e1a8     +LDI R26 , LOW ( 0x3F317218 )
0004dd e7b2     +LDI R27 , HIGH ( 0x3F317218 )
0004de e381     +LDI R24 , BYTE3 ( 0x3F317218 )
0004df e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
0004e0 d3b7      	RCALL __MULF12
0004e1 91af      	POP  R26
0004e2 91bf      	POP  R27
0004e3 918f      	POP  R24
0004e4 919f      	POP  R25
0004e5 d362      	RCALL __ADDF12
                 _0x20A0007:
0004e6 8119      	LDD  R17,Y+1
0004e7 8108      	LDD  R16,Y+0
0004e8 962a      	ADIW R28,10
0004e9 9508      	RET
                 ; .FEND
                 _sin:
                 ; .FSTART _sin
0004ea d23d      	RCALL SUBOPT_0x25
                +
0004eb e8e3     +LDI R30 , LOW ( 0x3E22F983 )
0004ec eff9     +LDI R31 , HIGH ( 0x3E22F983 )
0004ed e262     +LDI R22 , BYTE3 ( 0x3E22F983 )
0004ee e37e     +LDI R23 , BYTE4 ( 0x3E22F983 )
                 	__GETD1N 0x3E22F983
0004ef d3a8      	RCALL __MULF12
0004f0 d240      	RCALL SUBOPT_0x26
0004f1 df89      	RCALL _floor
0004f2 d247      	RCALL SUBOPT_0x27
0004f3 d4ba      	RCALL __SWAPD12
0004f4 d34c      	RCALL __SUBF12
0004f5 d23b      	RCALL SUBOPT_0x26
0004f6 d248      	RCALL SUBOPT_0x28
0004f7 d433      	RCALL __CMPF12
0004f8 f009      	BREQ PC+2
0004f9 f408      	BRCC PC+2
0004fa c004      	RJMP _0x2040017
0004fb d248      	RCALL SUBOPT_0x29
0004fc d1f6      	RCALL SUBOPT_0x19
0004fd d24b      	RCALL SUBOPT_0x2A
0004fe e011      	LDI  R17,LOW(1)
                 _0x2040017:
0004ff d23a      	RCALL SUBOPT_0x27
                +
000500 e0e0     +LDI R30 , LOW ( 0x3E800000 )
000501 e0f0     +LDI R31 , HIGH ( 0x3E800000 )
000502 e860     +LDI R22 , BYTE3 ( 0x3E800000 )
000503 e37e     +LDI R23 , BYTE4 ( 0x3E800000 )
                 	__GETD1N 0x3E800000
000504 d426      	RCALL __CMPF12
000505 f009      	BREQ PC+2
000506 f408      	BRCC PC+2
000507 c003      	RJMP _0x2040018
000508 d231      	RCALL SUBOPT_0x27
000509 d235      	RCALL SUBOPT_0x28
00050a d23e      	RCALL SUBOPT_0x2A
                 _0x2040018:
00050b 3010      	CPI  R17,0
00050c f009      	BREQ _0x2040019
00050d d241      	RCALL SUBOPT_0x2B
                 _0x2040019:
00050e d235      	RCALL SUBOPT_0x29
00050f d22a      	RCALL SUBOPT_0x27
000510 d387      	RCALL __MULF12
000511 d244      	RCALL SUBOPT_0x2C
000512 d248      	RCALL SUBOPT_0x2D
                +
000513 eba1     +LDI R26 , LOW ( 0x4226C4B1 )
000514 ecb4     +LDI R27 , HIGH ( 0x4226C4B1 )
000515 e286     +LDI R24 , BYTE3 ( 0x4226C4B1 )
000516 e492     +LDI R25 , BYTE4 ( 0x4226C4B1 )
                 	__GETD2N 0x4226C4B1
000517 d380      	RCALL __MULF12
000518 01df      	MOVW R26,R30
000519 01cb      	MOVW R24,R22
                +
00051a e1ed     +LDI R30 , LOW ( 0x422DE51D )
00051b eef5     +LDI R31 , HIGH ( 0x422DE51D )
00051c e26d     +LDI R22 , BYTE3 ( 0x422DE51D )
00051d e472     +LDI R23 , BYTE4 ( 0x422DE51D )
                 	__GETD1N 0x422DE51D
00051e d48f      	RCALL __SWAPD12
00051f d321      	RCALL __SUBF12
000520 d23f      	RCALL SUBOPT_0x2E
                +
000521 e4ac     +LDI R26 , LOW ( 0x4104534C )
000522 e5b3     +LDI R27 , HIGH ( 0x4104534C )
000523 e084     +LDI R24 , BYTE3 ( 0x4104534C )
000524 e491     +LDI R25 , BYTE4 ( 0x4104534C )
                 	__GETD2N 0x4104534C
000525 d322      	RCALL __ADDF12
000526 d213      	RCALL SUBOPT_0x27
000527 d370      	RCALL __MULF12
000528 937f      	PUSH R23
000529 936f      	PUSH R22
00052a 93ff      	PUSH R31
00052b 93ef      	PUSH R30
00052c d22e      	RCALL SUBOPT_0x2D
                +
00052d e1a1     +LDI R26 , LOW ( 0x3FDEED11 )
00052e eebd     +LDI R27 , HIGH ( 0x3FDEED11 )
00052f ed8e     +LDI R24 , BYTE3 ( 0x3FDEED11 )
000530 e39f     +LDI R25 , BYTE4 ( 0x3FDEED11 )
                 	__GETD2N 0x3FDEED11
000531 d316      	RCALL __ADDF12
000532 d22d      	RCALL SUBOPT_0x2E
                +
000533 e5ae     +LDI R26 , LOW ( 0x3FA87B5E )
000534 e7bb     +LDI R27 , HIGH ( 0x3FA87B5E )
000535 ea88     +LDI R24 , BYTE3 ( 0x3FA87B5E )
000536 e39f     +LDI R25 , BYTE4 ( 0x3FA87B5E )
                 	__GETD2N 0x3FA87B5E
000537 d310      	RCALL __ADDF12
000538 91af      	POP  R26
000539 91bf      	POP  R27
00053a 918f      	POP  R24
00053b 919f      	POP  R25
00053c d3a9      	RCALL __DIVF21
00053d c0a8      	RJMP _0x20A0004
                 ; .FEND
                 _cos:
                 ; .FSTART _cos
00053e d1c3      	RCALL SUBOPT_0x1C
                +
00053f edeb     +LDI R30 , LOW ( 0x3FC90FDB )
000540 e0ff     +LDI R31 , HIGH ( 0x3FC90FDB )
000541 ec69     +LDI R22 , BYTE3 ( 0x3FC90FDB )
000542 e37f     +LDI R23 , BYTE4 ( 0x3FC90FDB )
                 	__GETD1N 0x3FC90FDB
000543 d2fd      	RCALL __SUBF12
000544 01df      	MOVW R26,R30
000545 01cb      	MOVW R24,R22
000546 dfa3      	RCALL _sin
000547 c0b5      	RJMP _0x20A0001
                 ; .FEND
                 _tan:
                 ; .FSTART _tan
000548 d460      	RCALL __PUTPARD2
000549 9724      	SBIW R28,4
00054a d21b      	RCALL SUBOPT_0x2F
00054b dff2      	RCALL _cos
00054c d1b8      	RCALL SUBOPT_0x1D
00054d d46d      	RCALL __CPD10
00054e f439      	BRNE _0x204001A
00054f d216      	RCALL SUBOPT_0x2F
000550 d46e      	RCALL __CPD02
000551 f414      	BRGE _0x204001B
000552 d218      	RCALL SUBOPT_0x30
000553 c02a      	RJMP _0x20A0006
                 _0x204001B:
000554 d1b9      	RCALL SUBOPT_0x20
000555 c028      	RJMP _0x20A0006
                 _0x204001A:
000556 d20f      	RCALL SUBOPT_0x2F
000557 df92      	RCALL _sin
000558 01df      	MOVW R26,R30
000559 01cb      	MOVW R24,R22
00055a d1ac      	RCALL SUBOPT_0x1E
00055b c021      	RJMP _0x20A0005
                 ; .FEND
                 _xatan:
                 ; .FSTART _xatan
00055c d44c      	RCALL __PUTPARD2
00055d 9724      	SBIW R28,4
                +
00055e 81ec     +LDD R30 , Y + 4
00055f 81fd     +LDD R31 , Y + 4 + 1
000560 816e     +LDD R22 , Y + 4 + 2
000561 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000562 d203      	RCALL SUBOPT_0x2F
000563 d334      	RCALL __MULF12
000564 d1a0      	RCALL SUBOPT_0x1D
000565 d1a1      	RCALL SUBOPT_0x1E
                +
000566 e6a5     +LDI R26 , LOW ( 0x40CBD065 )
000567 edb0     +LDI R27 , HIGH ( 0x40CBD065 )
000568 ec8b     +LDI R24 , BYTE3 ( 0x40CBD065 )
000569 e490     +LDI R25 , BYTE4 ( 0x40CBD065 )
                 	__GETD2N 0x40CBD065
00056a d205      	RCALL SUBOPT_0x31
00056b d1fa      	RCALL SUBOPT_0x2F
00056c d32b      	RCALL __MULF12
00056d 937f      	PUSH R23
00056e 936f      	PUSH R22
00056f 93ff      	PUSH R31
000570 93ef      	PUSH R30
000571 d195      	RCALL SUBOPT_0x1E
                +
000572 e0a0     +LDI R26 , LOW ( 0x41296D00 )
000573 e6bd     +LDI R27 , HIGH ( 0x41296D00 )
000574 e289     +LDI R24 , BYTE3 ( 0x41296D00 )
000575 e491     +LDI R25 , BYTE4 ( 0x41296D00 )
                 	__GETD2N 0x41296D00
000576 d2d1      	RCALL __ADDF12
000577 d1ff      	RCALL SUBOPT_0x32
000578 d1f7      	RCALL SUBOPT_0x31
000579 91af      	POP  R26
00057a 91bf      	POP  R27
00057b 918f      	POP  R24
00057c 919f      	POP  R25
                 _0x20A0005:
00057d d368      	RCALL __DIVF21
                 _0x20A0006:
00057e 9628      	ADIW R28,8
00057f 9508      	RET
                 ; .FEND
                 _yatan:
                 ; .FSTART _yatan
000580 d181      	RCALL SUBOPT_0x1C
                +
000581 eced     +LDI R30 , LOW ( 0x3ED413CD )
000582 e1f3     +LDI R31 , HIGH ( 0x3ED413CD )
000583 ed64     +LDI R22 , BYTE3 ( 0x3ED413CD )
000584 e37e     +LDI R23 , BYTE4 ( 0x3ED413CD )
                 	__GETD1N 0x3ED413CD
000585 d3a5      	RCALL __CMPF12
000586 f418      	BRSH _0x2040020
000587 d1ef      	RCALL SUBOPT_0x32
000588 dfd3      	RCALL _xatan
000589 c073      	RJMP _0x20A0001
                 _0x2040020:
00058a d1ec      	RCALL SUBOPT_0x32
                +
00058b e7ea     +LDI R30 , LOW ( 0x401A827A )
00058c e8f2     +LDI R31 , HIGH ( 0x401A827A )
00058d e16a     +LDI R22 , BYTE3 ( 0x401A827A )
00058e e470     +LDI R23 , BYTE4 ( 0x401A827A )
                 	__GETD1N 0x401A827A
00058f d39b      	RCALL __CMPF12
000590 f009      	BREQ PC+2
000591 f408      	BRCC PC+2
000592 c004      	RJMP _0x2040021
000593 d173      	RCALL SUBOPT_0x1E
000594 d11d      	RCALL SUBOPT_0xE
000595 d1e3      	RCALL SUBOPT_0x33
000596 c060      	RJMP _0x20A0002
                 _0x2040021:
000597 d16f      	RCALL SUBOPT_0x1E
000598 d119      	RCALL SUBOPT_0xE
000599 d2a7      	RCALL __SUBF12
00059a 937f      	PUSH R23
00059b 936f      	PUSH R22
00059c 93ff      	PUSH R31
00059d 93ef      	PUSH R30
00059e d168      	RCALL SUBOPT_0x1E
00059f d112      	RCALL SUBOPT_0xE
0005a0 d2a7      	RCALL __ADDF12
0005a1 91af      	POP  R26
0005a2 91bf      	POP  R27
0005a3 918f      	POP  R24
0005a4 919f      	POP  R25
0005a5 d1d3      	RCALL SUBOPT_0x33
                +
0005a6 edab     +LDI R26 , LOW ( 0x3F490FDB )
0005a7 e0bf     +LDI R27 , HIGH ( 0x3F490FDB )
0005a8 e489     +LDI R24 , BYTE3 ( 0x3F490FDB )
0005a9 e39f     +LDI R25 , BYTE4 ( 0x3F490FDB )
                 	__GETD2N 0x3F490FDB
0005aa d29d      	RCALL __ADDF12
0005ab c051      	RJMP _0x20A0001
                 ; .FEND
                 _asin:
                 ; .FSTART _asin
0005ac d17b      	RCALL SUBOPT_0x25
0005ad d1cf      	RCALL SUBOPT_0x34
0005ae f038      	BRLO _0x2040023
0005af d18a      	RCALL SUBOPT_0x27
0005b0 d0ea      	RCALL SUBOPT_0xB
0005b1 d379      	RCALL __CMPF12
0005b2 f011      	BREQ PC+3
0005b3 f008      	BRCS PC+2
0005b4 c001      	RJMP _0x2040023
0005b5 c002      	RJMP _0x2040022
                 _0x2040023:
0005b6 d1b4      	RCALL SUBOPT_0x30
0005b7 c02e      	RJMP _0x20A0004
                 _0x2040022:
0005b8 85a8      	LDD  R26,Y+8
0005b9 23aa      	TST  R26
0005ba f412      	BRPL _0x2040025
0005bb d193      	RCALL SUBOPT_0x2B
0005bc e011      	LDI  R17,LOW(1)
                 _0x2040025:
0005bd d186      	RCALL SUBOPT_0x29
0005be d17b      	RCALL SUBOPT_0x27
0005bf d2d8      	RCALL __MULF12
0005c0 d0f1      	RCALL SUBOPT_0xE
0005c1 d3ec      	RCALL __SWAPD12
0005c2 d27e      	RCALL __SUBF12
0005c3 01df      	MOVW R26,R30
0005c4 01cb      	MOVW R24,R22
0005c5 d385      	RCALL _sqrt
0005c6 d18f      	RCALL SUBOPT_0x2C
0005c7 d172      	RCALL SUBOPT_0x27
0005c8 d154      	RCALL SUBOPT_0x23
0005c9 f009      	BREQ PC+2
0005ca f408      	BRCC PC+2
0005cb c00d      	RJMP _0x2040026
0005cc d177      	RCALL SUBOPT_0x29
                +
0005cd 81a9     +LDD R26 , Y + 1
0005ce 81ba     +LDD R27 , Y + 1 + 1
0005cf 818b     +LDD R24 , Y + 1 + 2
0005d0 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0005d1 d1b1      	RCALL SUBOPT_0x35
                +
0005d2 edab     +LDI R26 , LOW ( 0x3FC90FDB )
0005d3 e0bf     +LDI R27 , HIGH ( 0x3FC90FDB )
0005d4 ec89     +LDI R24 , BYTE3 ( 0x3FC90FDB )
0005d5 e39f     +LDI R25 , BYTE4 ( 0x3FC90FDB )
                 	__GETD2N 0x3FC90FDB
0005d6 d3d7      	RCALL __SWAPD12
0005d7 d269      	RCALL __SUBF12
0005d8 c003      	RJMP _0x2040035
                 _0x2040026:
0005d9 d181      	RCALL SUBOPT_0x2D
0005da d15f      	RCALL SUBOPT_0x27
0005db d1a7      	RCALL SUBOPT_0x35
                 _0x2040035:
                +
0005dc 83e9     +STD Y + 1 , R30
0005dd 83fa     +STD Y + 1 + 1 , R31
0005de 836b     +STD Y + 1 + 2 , R22
0005df 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0005e0 3010      	CPI  R17,0
0005e1 f019      	BREQ _0x2040028
0005e2 d178      	RCALL SUBOPT_0x2D
0005e3 d1be      	RCALL __ANEGF1
0005e4 c001      	RJMP _0x20A0004
                 _0x2040028:
0005e5 d175      	RCALL SUBOPT_0x2D
                 _0x20A0004:
0005e6 8118      	LDD  R17,Y+0
0005e7 9629      	ADIW R28,9
0005e8 9508      	RET
                 ; .FEND
                 _acos:
                 ; .FSTART _acos
0005e9 d118      	RCALL SUBOPT_0x1C
0005ea d192      	RCALL SUBOPT_0x34
0005eb f038      	BRLO _0x204002A
0005ec d18a      	RCALL SUBOPT_0x32
0005ed d0ad      	RCALL SUBOPT_0xB
0005ee d33c      	RCALL __CMPF12
0005ef f011      	BREQ PC+3
0005f0 f008      	BRCS PC+2
0005f1 c001      	RJMP _0x204002A
0005f2 c002      	RJMP _0x2040029
                 _0x204002A:
0005f3 d177      	RCALL SUBOPT_0x30
0005f4 c008      	RJMP _0x20A0001
                 _0x2040029:
0005f5 d181      	RCALL SUBOPT_0x32
0005f6 dfb5      	RCALL _asin
                 _0x20A0002:
                +
0005f7 edab     +LDI R26 , LOW ( 0x3FC90FDB )
0005f8 e0bf     +LDI R27 , HIGH ( 0x3FC90FDB )
0005f9 ec89     +LDI R24 , BYTE3 ( 0x3FC90FDB )
0005fa e39f     +LDI R25 , BYTE4 ( 0x3FC90FDB )
                 	__GETD2N 0x3FC90FDB
0005fb d3b2      	RCALL __SWAPD12
                 _0x20A0003:
0005fc d244      	RCALL __SUBF12
                 _0x20A0001:
0005fd 9624      	ADIW R28,4
0005fe 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0005ff 93ba      	ST   -Y,R27
000600 93aa      	ST   -Y,R26
000601 91e9          ld   r30,y+
000602 91f9          ld   r31,y+
000603 91a9          ld   r26,y+
000604 91b9          ld   r27,y+
000605 01cd          movw r24,r26
                 strcpyf0:
000606 9005      	lpm  r0,z+
000607 920d          st   x+,r0
000608 2000          tst  r0
000609 f7e1          brne strcpyf0
00060a 01fc          movw r30,r24
00060b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _a:
000160           	.BYTE 0x4
                 _b:
000164           	.BYTE 0x4
                 _c:
000168           	.BYTE 0x4
                 _q:
00016c           	.BYTE 0x4
                 _t:
000170           	.BYTE 0x4
                 _lcd:
000174           	.BYTE 0x19
                 __base_y_G100:
00018d           	.BYTE 0x4
                 __seed_G101:
000191           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
00060c dc12      	RCALL _key
00060d 2e7e      	MOV  R7,R30
00060e e0ef      	LDI  R30,LOW(15)
00060f 15e7      	CP   R30,R7
000610 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:79 WORDS
                 SUBOPT_0x1:
000611 e0e0      	LDI  R30,LOW(0)
000612 93e0 0160 	STS  _a,R30
000614 93e0 0161 	STS  _a+1,R30
000616 93e0 0162 	STS  _a+2,R30
000618 93e0 0163 	STS  _a+3,R30
00061a 93e0 0164 	STS  _b,R30
00061c 93e0 0165 	STS  _b+1,R30
00061e 93e0 0166 	STS  _b+2,R30
000620 93e0 0167 	STS  _b+3,R30
000622 93e0 0168 	STS  _c,R30
000624 93e0 0169 	STS  _c+1,R30
000626 93e0 016a 	STS  _c+2,R30
000628 93e0 016b 	STS  _c+3,R30
00062a ccdc      	RJMP _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x2:
00062b 91a0 0160 	LDS  R26,_a
00062d 91b0 0161 	LDS  R27,_a+1
00062f 9180 0162 	LDS  R24,_a+2
000631 9190 0163 	LDS  R25,_a+3
                +
000633 e0e0     +LDI R30 , LOW ( 0x41200000 )
000634 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000635 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000636 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000637 d260      	RCALL __MULF12
000638 01df      	MOVW R26,R30
000639 01cb      	MOVW R24,R22
00063a 2de7      	MOV  R30,R7
00063b 27ff      	CLR  R31
00063c 2766      	CLR  R22
00063d 2777      	CLR  R23
00063e d1cf      	RCALL __CDF1
00063f d208      	RCALL __ADDF12
000640 93e0 0160 	STS  _a,R30
000642 93f0 0161 	STS  _a+1,R31
000644 9360 0162 	STS  _a+2,R22
000646 9370 0163 	STS  _a+3,R23
000648 2de7      	MOV  R30,R7
000649 e0f0      	LDI  R31,0
00064a 93fa      	ST   -Y,R31
00064b 93ea      	ST   -Y,R30
00064c e7a4      	LDI  R26,LOW(_lcd)
00064d e0b1      	LDI  R27,HIGH(_lcd)
00064e dd42      	RCALL _itoa
00064f e7a4      	LDI  R26,LOW(_lcd)
000650 e0b1      	LDI  R27,HIGH(_lcd)
000651 dcdb      	RCALL _lcd_puts
000652 e3a2      	LDI  R26,LOW(50)
000653 e0b0      	LDI  R27,0
000654 c132      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000655 2de7      	MOV  R30,R7
000656 e0f0      	LDI  R31,0
000657 93fa      	ST   -Y,R31
000658 93ea      	ST   -Y,R30
000659 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
00065a 91a0 0164 	LDS  R26,_b
00065c 91b0 0165 	LDS  R27,_b+1
00065e 9180 0166 	LDS  R24,_b+2
000660 9190 0167 	LDS  R25,_b+3
000662 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
                +
000663 e0e0     +LDI R30 , LOW ( 0x41200000 )
000664 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000665 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000666 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000667 d230      	RCALL __MULF12
000668 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000669 27ff      	CLR  R31
00066a 2766      	CLR  R22
00066b 2777      	CLR  R23
00066c d1a1      	RCALL __CDF1
00066d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x7:
00066e 91e0 0164 	LDS  R30,_b
000670 91f0 0165 	LDS  R31,_b+1
000672 9160 0166 	LDS  R22,_b+2
000674 9170 0167 	LDS  R23,_b+3
000676 91a0 0160 	LDS  R26,_a
000678 91b0 0161 	LDS  R27,_a+1
00067a 9180 0162 	LDS  R24,_a+2
00067c 9190 0163 	LDS  R25,_a+3
00067e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
00067f d266      	RCALL __DIVF21
000680 93e0 0168 	STS  _c,R30
000682 93f0 0169 	STS  _c+1,R31
000684 9360 016a 	STS  _c+2,R22
000686 9370 016b 	STS  _c+3,R23
000688 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:68 WORDS
                 SUBOPT_0x9:
000689 93e0 0168 	STS  _c,R30
00068b 93f0 0169 	STS  _c+1,R31
00068d 9360 016a 	STS  _c+2,R22
00068f 9370 016b 	STS  _c+3,R23
000691 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xA:
000692 91e0 0160 	LDS  R30,_a
000694 91f0 0161 	LDS  R31,_a+1
000696 9160 0162 	LDS  R22,_a+2
000698 9170 0163 	LDS  R23,_a+3
00069a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
                +
00069b e0e0     +LDI R30 , LOW ( 0x3F800000 )
00069c e0f0     +LDI R31 , HIGH ( 0x3F800000 )
00069d e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00069e e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00069f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
0006a0 93e0 016c 	STS  _q,R30
0006a2 93f0 016d 	STS  _q+1,R31
0006a4 9360 016e 	STS  _q+2,R22
0006a6 9370 016f 	STS  _q+3,R23
0006a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0xD:
0006a9 91a0 0170 	LDS  R26,_t
0006ab 91b0 0171 	LDS  R27,_t+1
0006ad 9180 0172 	LDS  R24,_t+2
0006af 9190 0173 	LDS  R25,_t+3
0006b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xE:
                +
0006b2 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0006b3 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0006b4 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0006b5 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0006b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
0006b7 91a0 0160 	LDS  R26,_a
0006b9 91b0 0161 	LDS  R27,_a+1
0006bb 9180 0162 	LDS  R24,_a+2
0006bd 9190 0163 	LDS  R25,_a+3
0006bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
0006c0 e010      	LDI  R17,LOW(0)
0006c1 e3a2      	LDI  R26,LOW(50)
0006c2 e0b0      	LDI  R27,0
0006c3 c0c3      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
0006c4 81ee      	LDD  R30,Y+6
0006c5 81ff      	LDD  R31,Y+6+1
0006c6 93fa      	ST   -Y,R31
0006c7 93ea      	ST   -Y,R30
0006c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
                +
0006c9 85e9     +LDD R30 , Y + 9
0006ca 85fa     +LDD R31 , Y + 9 + 1
0006cb 856b     +LDD R22 , Y + 9 + 2
0006cc 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0006cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x13:
                +
0006ce 87e9     +STD Y + 9 , R30
0006cf 87fa     +STD Y + 9 + 1 , R31
0006d0 876b     +STD Y + 9 + 2 , R22
0006d1 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
0006d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x14:
0006d3 81ae      	LDD  R26,Y+6
0006d4 81bf      	LDD  R27,Y+6+1
0006d5 9611      	ADIW R26,1
0006d6 83ae      	STD  Y+6,R26
0006d7 83bf      	STD  Y+6+1,R27
0006d8 9711      	SBIW R26,1
0006d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x15:
                +
0006da 81aa     +LDD R26 , Y + 2
0006db 81bb     +LDD R27 , Y + 2 + 1
0006dc 818c     +LDD R24 , Y + 2 + 2
0006dd 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0006de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
                +
0006df eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0006e0 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0006e1 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0006e2 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0006e3 d1b4      	RCALL __MULF12
0006e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x17:
                +
0006e5 83ea     +STD Y + 2 , R30
0006e6 83fb     +STD Y + 2 + 1 , R31
0006e7 836c     +STD Y + 2 + 2 , R22
0006e8 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0006e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x18:
                +
0006ea 81ea     +LDD R30 , Y + 2
0006eb 81fb     +LDD R31 , Y + 2 + 1
0006ec 816c     +LDD R22 , Y + 2 + 2
0006ed 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0006ee 85a9     +LDD R26 , Y + 9
0006ef 85ba     +LDD R27 , Y + 9 + 1
0006f0 858b     +LDD R24 , Y + 9 + 2
0006f1 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0006f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
                +
0006f3 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0006f4 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0006f5 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0006f6 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0006f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0006f8 2fe0      	MOV  R30,R16
0006f9 5de0      	SUBI R30,-LOW(48)
0006fa 93ec      	ST   X,R30
0006fb 2fe0      	MOV  R30,R16
0006fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1B:
                +
0006fd 85a9     +LDD R26 , Y + 9
0006fe 85ba     +LDD R27 , Y + 9 + 1
0006ff 858b     +LDD R24 , Y + 9 + 2
000700 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000701 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1C:
000702 d2a6      	RCALL __PUTPARD2
000703 d296      	RCALL __GETD2S0
000704 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1D:
000705 d299      	RCALL __PUTD1S0
000706 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1E:
000707 d28d      	RCALL __GETD1S0
000708 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1F:
                +
000709 81ae     +LDD R26 , Y + 6
00070a 81bf     +LDD R27 , Y + 6 + 1
00070b 8588     +LDD R24 , Y + 6 + 2
00070c 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00070d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
                +
00070e efef     +LDI R30 , LOW ( 0xFF7FFFFF )
00070f efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
000710 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
000711 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000712 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x21:
                +
000713 81ee     +LDD R30 , Y + 6
000714 81ff     +LDD R31 , Y + 6 + 1
000715 8568     +LDD R22 , Y + 6 + 2
000716 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000717 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x22:
                +
000718 83ee     +STD Y + 6 , R30
000719 83ff     +STD Y + 6 + 1 , R31
00071a 8768     +STD Y + 6 + 2 , R22
00071b 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
00071c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x23:
                +
00071d efe3     +LDI R30 , LOW ( 0x3F3504F3 )
00071e e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
00071f e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000720 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000721 d209      	RCALL __CMPF12
000722 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
                +
000723 81ea     +LDD R30 , Y + 2
000724 81fb     +LDD R31 , Y + 2 + 1
000725 816c     +LDD R22 , Y + 2 + 2
000726 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000727 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
000728 d280      	RCALL __PUTPARD2
000729 9724      	SBIW R28,4
00072a 931a      	ST   -Y,R17
00072b e010      	LDI  R17,0
                +
00072c 81ad     +LDD R26 , Y + 5
00072d 81be     +LDD R27 , Y + 5 + 1
00072e 818f     +LDD R24 , Y + 5 + 2
00072f 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
000730 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
                +
000731 83ed     +STD Y + 5 , R30
000732 83fe     +STD Y + 5 + 1 , R31
000733 836f     +STD Y + 5 + 2 , R22
000734 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
                +
000735 81ad     +LDD R26 , Y + 5
000736 81be     +LDD R27 , Y + 5 + 1
000737 818f     +LDD R24 , Y + 5 + 2
000738 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
000739 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x27:
                +
00073a 81ad     +LDD R26 , Y + 5
00073b 81be     +LDD R27 , Y + 5 + 1
00073c 818f     +LDD R24 , Y + 5 + 2
00073d 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
00073e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
                +
00073f e0e0     +LDI R30 , LOW ( 0x3F000000 )
000740 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000741 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000742 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000743 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x29:
                +
000744 81ed     +LDD R30 , Y + 5
000745 81fe     +LDD R31 , Y + 5 + 1
000746 816f     +LDD R22 , Y + 5 + 2
000747 8578     +LDD R23 , Y + 5 + 3
                 	__GETD1S 5
000748 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2A:
000749 d0f7      	RCALL __SUBF12
                +
00074a 83ed     +STD Y + 5 , R30
00074b 83fe     +STD Y + 5 + 1 , R31
00074c 836f     +STD Y + 5 + 2 , R22
00074d 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
00074e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2B:
00074f dff4      	RCALL SUBOPT_0x29
000750 d051      	RCALL __ANEGF1
                +
000751 83ed     +STD Y + 5 , R30
000752 83fe     +STD Y + 5 + 1 , R31
000753 836f     +STD Y + 5 + 2 , R22
000754 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
000755 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
                +
000756 83e9     +STD Y + 1 , R30
000757 83fa     +STD Y + 1 + 1 , R31
000758 836b     +STD Y + 1 + 2 , R22
000759 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
00075a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2D:
                +
00075b 81e9     +LDD R30 , Y + 1
00075c 81fa     +LDD R31 , Y + 1 + 1
00075d 816b     +LDD R22 , Y + 1 + 2
00075e 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
00075f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
                +
000760 81a9     +LDD R26 , Y + 1
000761 81ba     +LDD R27 , Y + 1 + 1
000762 818b     +LDD R24 , Y + 1 + 2
000763 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000764 d133      	RCALL __MULF12
000765 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2F:
                +
000766 81ac     +LDD R26 , Y + 4
000767 81bd     +LDD R27 , Y + 4 + 1
000768 818e     +LDD R24 , Y + 4 + 2
000769 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00076a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x30:
                +
00076b efef     +LDI R30 , LOW ( 0x7F7FFFFF )
00076c efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00076d e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00076e e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00076f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
000770 d127      	RCALL __MULF12
                +
000771 e4ae     +LDI R26 , LOW ( 0x414A8F4E )
000772 e8bf     +LDI R27 , HIGH ( 0x414A8F4E )
000773 e48a     +LDI R24 , BYTE3 ( 0x414A8F4E )
000774 e491     +LDI R25 , BYTE4 ( 0x414A8F4E )
                 	__GETD2N 0x414A8F4E
000775 d0d2      	RCALL __ADDF12
000776 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x32:
000777 d222      	RCALL __GETD2S0
000778 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
000779 d16c      	RCALL __DIVF21
00077a 01df      	MOVW R26,R30
00077b 01cb      	MOVW R24,R22
00077c cddf      	RJMP _xatan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x34:
                +
00077d e0e0     +LDI R30 , LOW ( 0xBF800000 )
00077e e0f0     +LDI R31 , HIGH ( 0xBF800000 )
00077f e860     +LDI R22 , BYTE3 ( 0xBF800000 )
000780 eb7f     +LDI R23 , BYTE4 ( 0xBF800000 )
                 	__GETD1N 0xBF800000
000781 d1a9      	RCALL __CMPF12
000782 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000783 d162      	RCALL __DIVF21
000784 01df      	MOVW R26,R30
000785 01cb      	MOVW R24,R22
000786 cdf9      	RJMP _yatan
                 
                 
                 	.CSEG
                 _delay_ms:
000787 9610      	adiw r26,0
000788 f039      	breq __delay_ms1
                 __delay_ms0:
000789 95a8      	wdr
                +
00078a ee88     +LDI R24 , LOW ( 0x3E8 )
00078b e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
00078c 9701     +SBIW R24 , 1
00078d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
00078e 9711      	sbiw r26,1
00078f f7c9      	brne __delay_ms0
                 __delay_ms1:
000790 9508      	ret
                 
                 _frexp:
000791 91e9      	LD   R30,Y+
000792 91f9      	LD   R31,Y+
000793 9169      	LD   R22,Y+
000794 9179      	LD   R23,Y+
000795 fb77      	BST  R23,7
000796 0f66      	LSL  R22
000797 1f77      	ROL  R23
000798 2788      	CLR  R24
000799 577e      	SUBI R23,0x7E
00079a 0b88      	SBC  R24,R24
00079b 937d      	ST   X+,R23
00079c 938c      	ST   X,R24
00079d e77e      	LDI  R23,0x7E
00079e 9576      	LSR  R23
00079f 9567      	ROR  R22
0007a0 f00e      	BRTS __ANEGF1
0007a1 9508      	RET
                 
                 __ANEGF1:
0007a2 9730      	SBIW R30,0
0007a3 4060      	SBCI R22,0
0007a4 4070      	SBCI R23,0
0007a5 f009      	BREQ __ANEGF10
0007a6 5870      	SUBI R23,0x80
                 __ANEGF10:
0007a7 9508      	RET
                 
                 __ROUND_REPACK:
0007a8 2355      	TST  R21
0007a9 f442      	BRPL __REPACK
0007aa 3850      	CPI  R21,0x80
0007ab f411      	BRNE __ROUND_REPACK0
0007ac ffe0      	SBRS R30,0
0007ad c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0007ae 9631      	ADIW R30,1
0007af 1f69      	ADC  R22,R25
0007b0 1f79      	ADC  R23,R25
0007b1 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0007b2 e850      	LDI  R21,0x80
0007b3 2757      	EOR  R21,R23
0007b4 f411      	BRNE __REPACK0
0007b5 935f      	PUSH R21
0007b6 c0cf      	RJMP __ZERORES
                 __REPACK0:
0007b7 3f5f      	CPI  R21,0xFF
0007b8 f031      	BREQ __REPACK1
0007b9 0f66      	LSL  R22
0007ba 0c00      	LSL  R0
0007bb 9557      	ROR  R21
0007bc 9567      	ROR  R22
0007bd 2f75      	MOV  R23,R21
0007be 9508      	RET
                 __REPACK1:
0007bf 935f      	PUSH R21
0007c0 2000      	TST  R0
0007c1 f00a      	BRMI __REPACK2
0007c2 c0cf      	RJMP __MAXRES
                 __REPACK2:
0007c3 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0007c4 e850      	LDI  R21,0x80
0007c5 2e19      	MOV  R1,R25
0007c6 2215      	AND  R1,R21
0007c7 0f88      	LSL  R24
0007c8 1f99      	ROL  R25
0007c9 2795      	EOR  R25,R21
0007ca 0f55      	LSL  R21
0007cb 9587      	ROR  R24
                 
                 __UNPACK1:
0007cc e850      	LDI  R21,0x80
0007cd 2e07      	MOV  R0,R23
0007ce 2205      	AND  R0,R21
0007cf 0f66      	LSL  R22
0007d0 1f77      	ROL  R23
0007d1 2775      	EOR  R23,R21
0007d2 0f55      	LSL  R21
0007d3 9567      	ROR  R22
0007d4 9508      	RET
                 
                 __CFD1U:
0007d5 9468      	SET
0007d6 c001      	RJMP __CFD1U0
                 __CFD1:
0007d7 94e8      	CLT
                 __CFD1U0:
0007d8 935f      	PUSH R21
0007d9 dff2      	RCALL __UNPACK1
0007da 3870      	CPI  R23,0x80
0007db f018      	BRLO __CFD10
0007dc 3f7f      	CPI  R23,0xFF
0007dd f408      	BRCC __CFD10
0007de c0a7      	RJMP __ZERORES
                 __CFD10:
0007df e156      	LDI  R21,22
0007e0 1b57      	SUB  R21,R23
0007e1 f4aa      	BRPL __CFD11
0007e2 9551      	NEG  R21
0007e3 3058      	CPI  R21,8
0007e4 f40e      	BRTC __CFD19
0007e5 3059      	CPI  R21,9
                 __CFD19:
0007e6 f030      	BRLO __CFD17
0007e7 efef      	SER  R30
0007e8 efff      	SER  R31
0007e9 ef6f      	SER  R22
0007ea e77f      	LDI  R23,0x7F
0007eb f977      	BLD  R23,7
0007ec c01a      	RJMP __CFD15
                 __CFD17:
0007ed 2777      	CLR  R23
0007ee 2355      	TST  R21
0007ef f0b9      	BREQ __CFD15
                 __CFD18:
0007f0 0fee      	LSL  R30
0007f1 1fff      	ROL  R31
0007f2 1f66      	ROL  R22
0007f3 1f77      	ROL  R23
0007f4 955a      	DEC  R21
0007f5 f7d1      	BRNE __CFD18
0007f6 c010      	RJMP __CFD15
                 __CFD11:
0007f7 2777      	CLR  R23
                 __CFD12:
0007f8 3058      	CPI  R21,8
0007f9 f028      	BRLO __CFD13
0007fa 2fef      	MOV  R30,R31
0007fb 2ff6      	MOV  R31,R22
0007fc 2f67      	MOV  R22,R23
0007fd 5058      	SUBI R21,8
0007fe cff9      	RJMP __CFD12
                 __CFD13:
0007ff 2355      	TST  R21
000800 f031      	BREQ __CFD15
                 __CFD14:
000801 9576      	LSR  R23
000802 9567      	ROR  R22
000803 95f7      	ROR  R31
000804 95e7      	ROR  R30
000805 955a      	DEC  R21
000806 f7d1      	BRNE __CFD14
                 __CFD15:
000807 2000      	TST  R0
000808 f40a      	BRPL __CFD16
000809 d178      	RCALL __ANEGD1
                 __CFD16:
00080a 915f      	POP  R21
00080b 9508      	RET
                 
                 __CDF1U:
00080c 9468      	SET
00080d c001      	RJMP __CDF1U0
                 __CDF1:
00080e 94e8      	CLT
                 __CDF1U0:
00080f 9730      	SBIW R30,0
000810 4060      	SBCI R22,0
000811 4070      	SBCI R23,0
000812 f0b1      	BREQ __CDF10
000813 2400      	CLR  R0
000814 f026      	BRTS __CDF11
000815 2377      	TST  R23
000816 f412      	BRPL __CDF11
000817 9400      	COM  R0
000818 d169      	RCALL __ANEGD1
                 __CDF11:
000819 2e17      	MOV  R1,R23
00081a e17e      	LDI  R23,30
00081b 2011      	TST  R1
                 __CDF12:
00081c f032      	BRMI __CDF13
00081d 957a      	DEC  R23
00081e 0fee      	LSL  R30
00081f 1fff      	ROL  R31
000820 1f66      	ROL  R22
000821 1c11      	ROL  R1
000822 cff9      	RJMP __CDF12
                 __CDF13:
000823 2fef      	MOV  R30,R31
000824 2ff6      	MOV  R31,R22
000825 2d61      	MOV  R22,R1
000826 935f      	PUSH R21
000827 df8a      	RCALL __REPACK
000828 915f      	POP  R21
                 __CDF10:
000829 9508      	RET
                 
                 __SWAPACC:
00082a 934f      	PUSH R20
00082b 01af      	MOVW R20,R30
00082c 01fd      	MOVW R30,R26
00082d 01da      	MOVW R26,R20
00082e 01ab      	MOVW R20,R22
00082f 01bc      	MOVW R22,R24
000830 01ca      	MOVW R24,R20
000831 2d40      	MOV  R20,R0
000832 2c01      	MOV  R0,R1
000833 2e14      	MOV  R1,R20
000834 914f      	POP  R20
000835 9508      	RET
                 
                 __UADD12:
000836 0fea      	ADD  R30,R26
000837 1ffb      	ADC  R31,R27
000838 1f68      	ADC  R22,R24
000839 9508      	RET
                 
                 __NEGMAN1:
00083a 95e0      	COM  R30
00083b 95f0      	COM  R31
00083c 9560      	COM  R22
00083d 5fef      	SUBI R30,-1
00083e 4fff      	SBCI R31,-1
00083f 4f6f      	SBCI R22,-1
000840 9508      	RET
                 
                 __SUBF12:
000841 935f      	PUSH R21
000842 df81      	RCALL __UNPACK
000843 3890      	CPI  R25,0x80
000844 f171      	BREQ __ADDF129
000845 e850      	LDI  R21,0x80
000846 2615      	EOR  R1,R21
                 
000847 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000848 935f      	PUSH R21
000849 df7a      	RCALL __UNPACK
00084a 3890      	CPI  R25,0x80
00084b f139      	BREQ __ADDF129
                 
                 __ADDF120:
00084c 3870      	CPI  R23,0x80
00084d f121      	BREQ __ADDF128
                 __ADDF121:
00084e 2f57      	MOV  R21,R23
00084f 1b59      	SUB  R21,R25
000850 f12b      	BRVS __ADDF1211
000851 f412      	BRPL __ADDF122
000852 dfd7      	RCALL __SWAPACC
000853 cffa      	RJMP __ADDF121
                 __ADDF122:
000854 3158      	CPI  R21,24
000855 f018      	BRLO __ADDF123
000856 27aa      	CLR  R26
000857 27bb      	CLR  R27
000858 2788      	CLR  R24
                 __ADDF123:
000859 3058      	CPI  R21,8
00085a f028      	BRLO __ADDF124
00085b 2fab      	MOV  R26,R27
00085c 2fb8      	MOV  R27,R24
00085d 2788      	CLR  R24
00085e 5058      	SUBI R21,8
00085f cff9      	RJMP __ADDF123
                 __ADDF124:
000860 2355      	TST  R21
000861 f029      	BREQ __ADDF126
                 __ADDF125:
000862 9586      	LSR  R24
000863 95b7      	ROR  R27
000864 95a7      	ROR  R26
000865 955a      	DEC  R21
000866 f7d9      	BRNE __ADDF125
                 __ADDF126:
000867 2d50      	MOV  R21,R0
000868 2551      	EOR  R21,R1
000869 f072      	BRMI __ADDF127
00086a dfcb      	RCALL __UADD12
00086b f438      	BRCC __ADDF129
00086c 9567      	ROR  R22
00086d 95f7      	ROR  R31
00086e 95e7      	ROR  R30
00086f 9573      	INC  R23
000870 f413      	BRVC __ADDF129
000871 c020      	RJMP __MAXRES
                 __ADDF128:
000872 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000873 df3e      	RCALL __REPACK
000874 915f      	POP  R21
000875 9508      	RET
                 __ADDF1211:
000876 f7d8      	BRCC __ADDF128
000877 cffb      	RJMP __ADDF129
                 __ADDF127:
000878 1bea      	SUB  R30,R26
000879 0bfb      	SBC  R31,R27
00087a 0b68      	SBC  R22,R24
00087b f051      	BREQ __ZERORES
00087c f410      	BRCC __ADDF1210
00087d 9400      	COM  R0
00087e dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00087f 2366      	TST  R22
000880 f392      	BRMI __ADDF129
000881 0fee      	LSL  R30
000882 1fff      	ROL  R31
000883 1f66      	ROL  R22
000884 957a      	DEC  R23
000885 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000886 27ee      	CLR  R30
000887 27ff      	CLR  R31
000888 2766      	CLR  R22
000889 2777      	CLR  R23
00088a 915f      	POP  R21
00088b 9508      	RET
                 
                 __MINRES:
00088c efef      	SER  R30
00088d efff      	SER  R31
00088e e76f      	LDI  R22,0x7F
00088f ef7f      	SER  R23
000890 915f      	POP  R21
000891 9508      	RET
                 
                 __MAXRES:
000892 efef      	SER  R30
000893 efff      	SER  R31
000894 e76f      	LDI  R22,0x7F
000895 e77f      	LDI  R23,0x7F
000896 915f      	POP  R21
000897 9508      	RET
                 
                 __MULF12:
000898 935f      	PUSH R21
000899 df2a      	RCALL __UNPACK
00089a 3870      	CPI  R23,0x80
00089b f351      	BREQ __ZERORES
00089c 3890      	CPI  R25,0x80
00089d f341      	BREQ __ZERORES
00089e 2401      	EOR  R0,R1
00089f 9408      	SEC
0008a0 1f79      	ADC  R23,R25
0008a1 f423      	BRVC __MULF124
0008a2 f31c      	BRLT __ZERORES
                 __MULF125:
0008a3 2000      	TST  R0
0008a4 f33a      	BRMI __MINRES
0008a5 cfec      	RJMP __MAXRES
                 __MULF124:
0008a6 920f      	PUSH R0
0008a7 931f      	PUSH R17
0008a8 932f      	PUSH R18
0008a9 933f      	PUSH R19
0008aa 934f      	PUSH R20
0008ab 2711      	CLR  R17
0008ac 2722      	CLR  R18
0008ad 2799      	CLR  R25
0008ae 9f68      	MUL  R22,R24
0008af 01a0      	MOVW R20,R0
0008b0 9f8f      	MUL  R24,R31
0008b1 2d30      	MOV  R19,R0
0008b2 0d41      	ADD  R20,R1
0008b3 1f59      	ADC  R21,R25
0008b4 9f6b      	MUL  R22,R27
0008b5 0d30      	ADD  R19,R0
0008b6 1d41      	ADC  R20,R1
0008b7 1f59      	ADC  R21,R25
0008b8 9f8e      	MUL  R24,R30
0008b9 d027      	RCALL __MULF126
0008ba 9fbf      	MUL  R27,R31
0008bb d025      	RCALL __MULF126
0008bc 9f6a      	MUL  R22,R26
0008bd d023      	RCALL __MULF126
0008be 9fbe      	MUL  R27,R30
0008bf d01d      	RCALL __MULF127
0008c0 9faf      	MUL  R26,R31
0008c1 d01b      	RCALL __MULF127
0008c2 9fae      	MUL  R26,R30
0008c3 0d11      	ADD  R17,R1
0008c4 1f29      	ADC  R18,R25
0008c5 1f39      	ADC  R19,R25
0008c6 1f49      	ADC  R20,R25
0008c7 1f59      	ADC  R21,R25
0008c8 2fe3      	MOV  R30,R19
0008c9 2ff4      	MOV  R31,R20
0008ca 2f65      	MOV  R22,R21
0008cb 2f52      	MOV  R21,R18
0008cc 914f      	POP  R20
0008cd 913f      	POP  R19
0008ce 912f      	POP  R18
0008cf 911f      	POP  R17
0008d0 900f      	POP  R0
0008d1 2366      	TST  R22
0008d2 f02a      	BRMI __MULF122
0008d3 0f55      	LSL  R21
0008d4 1fee      	ROL  R30
0008d5 1fff      	ROL  R31
0008d6 1f66      	ROL  R22
0008d7 c002      	RJMP __MULF123
                 __MULF122:
0008d8 9573      	INC  R23
0008d9 f24b      	BRVS __MULF125
                 __MULF123:
0008da decd      	RCALL __ROUND_REPACK
0008db 915f      	POP  R21
0008dc 9508      	RET
                 
                 __MULF127:
0008dd 0d10      	ADD  R17,R0
0008de 1d21      	ADC  R18,R1
0008df 1f39      	ADC  R19,R25
0008e0 c002      	RJMP __MULF128
                 __MULF126:
0008e1 0d20      	ADD  R18,R0
0008e2 1d31      	ADC  R19,R1
                 __MULF128:
0008e3 1f49      	ADC  R20,R25
0008e4 1f59      	ADC  R21,R25
0008e5 9508      	RET
                 
                 __DIVF21:
0008e6 935f      	PUSH R21
0008e7 dedc      	RCALL __UNPACK
0008e8 3870      	CPI  R23,0x80
0008e9 f421      	BRNE __DIVF210
0008ea 2011      	TST  R1
                 __DIVF211:
0008eb f40a      	BRPL __DIVF219
0008ec cf9f      	RJMP __MINRES
                 __DIVF219:
0008ed cfa4      	RJMP __MAXRES
                 __DIVF210:
0008ee 3890      	CPI  R25,0x80
0008ef f409      	BRNE __DIVF218
                 __DIVF217:
0008f0 cf95      	RJMP __ZERORES
                 __DIVF218:
0008f1 2401      	EOR  R0,R1
0008f2 9408      	SEC
0008f3 0b97      	SBC  R25,R23
0008f4 f41b      	BRVC __DIVF216
0008f5 f3d4      	BRLT __DIVF217
0008f6 2000      	TST  R0
0008f7 cff3      	RJMP __DIVF211
                 __DIVF216:
0008f8 2f79      	MOV  R23,R25
0008f9 931f      	PUSH R17
0008fa 932f      	PUSH R18
0008fb 933f      	PUSH R19
0008fc 934f      	PUSH R20
0008fd 2411      	CLR  R1
0008fe 2711      	CLR  R17
0008ff 2722      	CLR  R18
000900 2733      	CLR  R19
000901 2744      	CLR  R20
000902 2755      	CLR  R21
000903 e290      	LDI  R25,32
                 __DIVF212:
000904 17ae      	CP   R26,R30
000905 07bf      	CPC  R27,R31
000906 0786      	CPC  R24,R22
000907 0741      	CPC  R20,R17
000908 f030      	BRLO __DIVF213
000909 1bae      	SUB  R26,R30
00090a 0bbf      	SBC  R27,R31
00090b 0b86      	SBC  R24,R22
00090c 0b41      	SBC  R20,R17
00090d 9408      	SEC
00090e c001      	RJMP __DIVF214
                 __DIVF213:
00090f 9488      	CLC
                 __DIVF214:
000910 1f55      	ROL  R21
000911 1f22      	ROL  R18
000912 1f33      	ROL  R19
000913 1c11      	ROL  R1
000914 1faa      	ROL  R26
000915 1fbb      	ROL  R27
000916 1f88      	ROL  R24
000917 1f44      	ROL  R20
000918 959a      	DEC  R25
000919 f751      	BRNE __DIVF212
00091a 01f9      	MOVW R30,R18
00091b 2d61      	MOV  R22,R1
00091c 914f      	POP  R20
00091d 913f      	POP  R19
00091e 912f      	POP  R18
00091f 911f      	POP  R17
000920 2366      	TST  R22
000921 f032      	BRMI __DIVF215
000922 0f55      	LSL  R21
000923 1fee      	ROL  R30
000924 1fff      	ROL  R31
000925 1f66      	ROL  R22
000926 957a      	DEC  R23
000927 f243      	BRVS __DIVF217
                 __DIVF215:
000928 de7f      	RCALL __ROUND_REPACK
000929 915f      	POP  R21
00092a 9508      	RET
                 
                 __CMPF12:
00092b 2399      	TST  R25
00092c f09a      	BRMI __CMPF120
00092d 2377      	TST  R23
00092e f042      	BRMI __CMPF121
00092f 1797      	CP   R25,R23
000930 f048      	BRLO __CMPF122
000931 f429      	BRNE __CMPF121
000932 17ae      	CP   R26,R30
000933 07bf      	CPC  R27,R31
000934 0786      	CPC  R24,R22
000935 f020      	BRLO __CMPF122
000936 f031      	BREQ __CMPF123
                 __CMPF121:
000937 9498      	CLZ
000938 9488      	CLC
000939 9508      	RET
                 __CMPF122:
00093a 9498      	CLZ
00093b 9408      	SEC
00093c 9508      	RET
                 __CMPF123:
00093d 9418      	SEZ
00093e 9488      	CLC
00093f 9508      	RET
                 __CMPF120:
000940 2377      	TST  R23
000941 f7c2      	BRPL __CMPF122
000942 1797      	CP   R25,R23
000943 f398      	BRLO __CMPF121
000944 f7a9      	BRNE __CMPF122
000945 17ea      	CP   R30,R26
000946 07fb      	CPC  R31,R27
000947 0768      	CPC  R22,R24
000948 f388      	BRLO __CMPF122
000949 f399      	BREQ __CMPF123
00094a cfec      	RJMP __CMPF121
                 
                 _sqrt:
00094b d05d      	rcall __PUTPARD2
00094c 9724      	sbiw r28,4
00094d 935f      	push r21
00094e 819f      	ldd  r25,y+7
00094f 2399      	tst  r25
000950 f411      	brne __sqrt0
000951 9628      	adiw r28,8
000952 cf33      	rjmp __zerores
                 __sqrt0:
000953 f412      	brpl __sqrt1
000954 9628      	adiw r28,8
000955 cf3c      	rjmp __maxres
                 __sqrt1:
000956 934f      	push r20
000957 e442      	ldi  r20,66
000958 818e      	ldd  r24,y+6
000959 81bd      	ldd  r27,y+5
00095a 81ac      	ldd  r26,y+4
                 __sqrt2:
00095b 8388      	st   y,r24
00095c 8399      	std  y+1,r25
00095d 83aa      	std  y+2,r26
00095e 83bb      	std  y+3,r27
00095f 01fd      	movw r30,r26
000960 01bc      	movw r22,r24
000961 81ac      	ldd  r26,y+4
000962 81bd      	ldd  r27,y+5
000963 818e      	ldd  r24,y+6
000964 819f      	ldd  r25,y+7
000965 df80      	rcall __divf21
000966 8188      	ld   r24,y
000967 8199      	ldd  r25,y+1
000968 81aa      	ldd  r26,y+2
000969 81bb      	ldd  r27,y+3
00096a dedd      	rcall __addf12
00096b de60      	rcall __unpack1
00096c 957a      	dec  r23
00096d de44      	rcall __repack
00096e 8188      	ld   r24,y
00096f 8199      	ldd  r25,y+1
000970 81aa      	ldd  r26,y+2
000971 81bb      	ldd  r27,y+3
000972 27ae      	eor  r26,r30
000973 7fa8      	andi r26,0xf8
000974 f421      	brne __sqrt4
000975 17bf      	cp   r27,r31
000976 0786      	cpc  r24,r22
000977 0797      	cpc  r25,r23
000978 f029      	breq __sqrt3
                 __sqrt4:
000979 954a      	dec  r20
00097a f019      	breq __sqrt3
00097b 01df      	movw r26,r30
00097c 01cb      	movw r24,r22
00097d cfdd      	rjmp __sqrt2
                 __sqrt3:
00097e 914f      	pop  r20
00097f 915f      	pop  r21
000980 9628      	adiw r28,8
000981 9508      	ret
                 
                 __ANEGD1:
000982 95f0      	COM  R31
000983 9560      	COM  R22
000984 9570      	COM  R23
000985 95e1      	NEG  R30
000986 4fff      	SBCI R31,-1
000987 4f6f      	SBCI R22,-1
000988 4f7f      	SBCI R23,-1
000989 9508      	RET
                 
                 __CBD1:
00098a 2ffe      	MOV  R31,R30
00098b 0fff      	ADD  R31,R31
00098c 0bff      	SBC  R31,R31
00098d 2f6f      	MOV  R22,R31
00098e 2f7f      	MOV  R23,R31
00098f 9508      	RET
                 
                 __CWD1:
000990 2f6f      	MOV  R22,R31
000991 0f66      	ADD  R22,R22
000992 0b66      	SBC  R22,R22
000993 2f76      	MOV  R23,R22
000994 9508      	RET
                 
                 __GETD1S0:
000995 81e8      	LD   R30,Y
000996 81f9      	LDD  R31,Y+1
000997 816a      	LDD  R22,Y+2
000998 817b      	LDD  R23,Y+3
000999 9508      	RET
                 
                 __GETD2S0:
00099a 81a8      	LD   R26,Y
00099b 81b9      	LDD  R27,Y+1
00099c 818a      	LDD  R24,Y+2
00099d 819b      	LDD  R25,Y+3
00099e 9508      	RET
                 
                 __PUTD1S0:
00099f 83e8      	ST   Y,R30
0009a0 83f9      	STD  Y+1,R31
0009a1 836a      	STD  Y+2,R22
0009a2 837b      	STD  Y+3,R23
0009a3 9508      	RET
                 
                 __PUTPARD1:
0009a4 937a      	ST   -Y,R23
0009a5 936a      	ST   -Y,R22
0009a6 93fa      	ST   -Y,R31
0009a7 93ea      	ST   -Y,R30
0009a8 9508      	RET
                 
                 __PUTPARD2:
0009a9 939a      	ST   -Y,R25
0009aa 938a      	ST   -Y,R24
0009ab 93ba      	ST   -Y,R27
0009ac 93aa      	ST   -Y,R26
0009ad 9508      	RET
                 
                 __SWAPD12:
0009ae 2e18      	MOV  R1,R24
0009af 2f86      	MOV  R24,R22
0009b0 2d61      	MOV  R22,R1
0009b1 2e19      	MOV  R1,R25
0009b2 2f97      	MOV  R25,R23
0009b3 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0009b4 2e1b      	MOV  R1,R27
0009b5 2fbf      	MOV  R27,R31
0009b6 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0009b7 2e1a      	MOV  R1,R26
0009b8 2fae      	MOV  R26,R30
0009b9 2de1      	MOV  R30,R1
0009ba 9508      	RET
                 
                 __CPD10:
0009bb 9730      	SBIW R30,0
0009bc 4060      	SBCI R22,0
0009bd 4070      	SBCI R23,0
0009be 9508      	RET
                 
                 __CPD02:
0009bf 2400      	CLR  R0
0009c0 160a      	CP   R0,R26
0009c1 060b      	CPC  R0,R27
0009c2 0608      	CPC  R0,R24
0009c3 0609      	CPC  R0,R25
0009c4 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  38 r1 :  30 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :  15 r7 :  18 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  20 r17:  54 r18:  12 r19:  12 r20:  26 r21:  65 r22: 141 r23: 120 
r24: 105 r25:  93 r26: 229 r27: 132 r28:  18 r29:   1 r30: 322 r31: 153 
x  :  15 y  : 280 z  :  10 
Registers used: 28 out of 35 (80.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   9 
adiw  :  18 and   :   5 andi  :   7 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   3 break :   0 breq  :  38 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :   3 brmi  :   9 brne  :  62 brpl  :  11 brsh  :   8 brtc  :   2 
brts  :   4 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  :   0 
cbi   :  28 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  45 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :  10 
cp    :  34 cpc   :  19 cpi   :  32 cpse  :   0 dec   :  12 des   :   0 
eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   5 jmp   :  26 ld    :  37 ldd   : 148 ldi   : 352 
lds   :  40 lpm   :  10 lsl   :  13 lsr   :   4 mov   :  66 movw  :  41 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   2 out   :  16 pop   :  48 push  :  48 rcall : 415 ret   : 104 
reti  :   0 rjmp  : 138 rol   :  25 ror   :  16 sbc   :  10 sbci  :  13 
sbi   :  16 sbic  :   0 sbis  :  25 sbiw  :  33 sbr   :   2 sbrc  :   2 
sbrs  :   1 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  62 std   :  49 sts   :  50 sub   :   5 subi  :  17 swap  :   2 
tst   :  22 wdr   :   1 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00138a   4920     82   5002   16384  30.5%
[.dseg] 0x000060 0x000195      0     53     53    1024   5.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
